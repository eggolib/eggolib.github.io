{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to eggolib's Documentation!","text":"<p>This documentation extends the information given by the documentation for the Origins mod. It's recommended that you familiarize yourself with developing a datapack using Origins/Apoli so that you know how exactly stuff works.</p> <p>If you have any questions, feel free to DM me in Discord (<code>eggohito#9048</code>), mention me in the <code>#addon-support</code> channel of the Origins Discord server, or open up a discussion/issue in the GitHub repository for eggolib.</p>"},{"location":"#helpful_links","title":"Helpful links","text":"<ul> <li>Minecraft Fandom Wiki: Data Pack</li> <li>Minecraft Fandom Wiki: Tutorials (Creating a data pack)</li> </ul>"},{"location":"misc/class_data_registries/","title":"Class Data Registries","text":"<p>Class data registries are objects that are instances of <code>HashMap&lt;String, Class&lt;?&gt;&gt;</code>, meaning that it's a table of key-value pairs where strings are the keys while Java classes are the values for the keys. It can be used to map the string into a Java class using the <code>ClassDataRegistry#mapStringToClass</code> method.</p>"},{"location":"misc/class_data_registries/#list","title":"List","text":"<ul> <li>In-Game Screen Class</li> </ul>"},{"location":"misc/class_data_registries/in-game_screen_class/","title":"In-Game Screen Class","text":"<p>Class Data Registry</p> <p>A registry mapping for client-side screen classes that are used in-game.</p> <p>Reference: <code>io.github.eggohito.eggolib.data.EggolibClassDataClient.java</code></p>"},{"location":"misc/class_data_registries/in-game_screen_class/#mapping","title":"Mapping","text":"String Class <code>\"anvil\"</code> <code>AnvilScreen.class</code> <code>\"beacon\"</code> <code>BeaconScreen.class</code> <code>\"blast_furnace\"</code> <code>BlastFurnaceScreen.class</code> <code>\"book_edit\"</code> <code>BookEditScreen.class</code> <code>\"book\"</code> <code>BookScreen.class</code> <code>\"brewing_stand\"</code> <code>BrewingStandScreen.class</code> <code>\"cartography_table\"</code> <code>CartographyTableScreen.class</code> <code>\"chat\"</code> <code>ChatScreen.class</code> <code>\"command_block\"</code> <code>CommandBlockScreen.class</code> <code>\"crafting\"</code> <code>CraftingScreen.class</code> <code>\"creative_inventory\"</code> <code>CreativeInventoryScreen.class</code> <code>\"death\"</code> <code>DeathScreen.class</code> <code>\"enchantment\"</code> <code>EnchantmentScreen.class</code> <code>\"furnace\"</code> <code>FurnaceScreen.class</code> <code>\"game_menu\"</code> <code>GameMenuScreen.class</code> <code>\"game_mode_selection\"</code> <code>GameModeSelectionScreen.class</code> <code>\"generic_3x3_container\"</code> <code>Generic3x3ContainerScreen.class</code> <code>\"generic_container\"</code> <code>GenericContainerScreen.class</code> <code>\"grindstone\"</code> <code>GrindstoneScreen.class</code> <code>\"hopper\"</code> <code>HopperScreen.class</code> <code>\"horse\"</code> <code>HorseScreen.class</code> <code>\"inventory\"</code> <code>InventoryScreen.class</code> <code>\"jigsaw_block\"</code> <code>JigsawBlockScreen.class</code> <code>\"lectern\"</code> <code>LecternScreen.class</code> <code>\"loom\"</code> <code>LoomScreen.class</code> <code>\"merchant\"</code> <code>MerchantScreen.class</code> <code>\"minecart_command_block\"</code> <code>MinecartCommandBlockScreen.class</code> <code>\"shulker_box\"</code> <code>ShulkerBoxScreen.class</code> <code>\"sign_edit\"</code> <code>SignEditScreen.class</code> <code>\"smithing\"</code> <code>SmithingScreen.class</code> <code>\"smoker\"</code> <code>SmokerScreen.class</code> <code>\"stonecutter\"</code> <code>StonecutterScreen.class</code> <code>\"structure_block\"</code> <code>StructureBlockScreen.class</code>"},{"location":"misc/class_data_registries/in-game_screen_class/#extras_origins","title":"Extras (Origins)","text":"String Class <code>\"choose_origin\"</code> <code>ChooseOriginScreen.class</code> <code>\"view_origin\"</code> <code>ViewOriginScreen.class</code>"},{"location":"types/bientity_action_types/","title":"Bi-entity Action Types","text":"<p>Bi-entity action types operate on a <code>Pair&lt;Entity, Entity&gt;</code> or in simpler terms: an 'actor' and a 'target'. The 'actor' and the 'target' is determined by the used power type and can be swapped. These are available to power/action types that provides a <code>bientity_action</code> object field.</p> <p>As a rule of thumb, the 'actor' is usually the entity that invoked the action (e.g: uses or attacks an entity) while the 'target' is the entity being targeted (e.g: the entity being used or attacked).</p> <p>Note</p> <p>See the documentation for Origins/Apoli's bi-entity action types for a list of bi-entity action types added by Origins/Apoli.</p>","boost":1},{"location":"types/bientity_action_types/#list","title":"List","text":"<ul> <li>Damage</li> </ul>","boost":1},{"location":"types/bientity_condition_types/","title":"Bi-entity Condition Types","text":"<p>Bi-entity condition types operate on a <code>Pair&lt;Entity, Entity&gt;</code> or in simpler terms: an 'actor' and a 'target'. The 'actor' and the 'target' is determined by the used power type and can be swapped. These are available to power/action/condition types that provides a <code>bientity_condition</code> object field.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's bi-entity condition types for a list of bi-entity condition types added by Origins/Apoli.</p>","boost":1},{"location":"types/bientity_condition_types/#list","title":"List","text":"<ul> <li>Compare Score</li> <li>Has Matching Tag</li> </ul>","boost":1},{"location":"types/block_action_types/","title":"Block Action Types","text":"<p>Block action types operate on a <code>Triple&lt;World, BlockPos, Direction&gt;</code>, which allows for modifying a block at a certain <code>World</code> and/or <code>BlockPos</code>. These are available to power/action/condition types that provides a <code>block_action</code> object field.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's block action types for a list of block action types added by Origins/Apoli.</p>","boost":1},{"location":"types/block_action_types/#list","title":"List","text":"<ul> <li>Area of Effect</li> </ul>","boost":1},{"location":"types/block_condition_types/","title":"Block Condition Types","text":"<p>Block condition types operate on a <code>CachedBlockPosition</code>, essentially a combination of <code>World</code> and <code>BlockPos</code>, which allows retrieving all necessary information about a certain block. These are available to power/action/condition types that provide a <code>block_condition</code> object field.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's block condition types for a list of block condition types added by Origins/Apoli.</p>","boost":1},{"location":"types/block_condition_types/#list","title":"List","text":"<ul> <li>Air</li> </ul>","boost":1},{"location":"types/damage_condition_types/","title":"Damage Condition Types","text":"<p>Damage condition types operate on a <code>Pair&lt;DamageSource, Float&gt;</code>, allowing to check not only the source of the damage dealt but also how much damage was dealt. These are available to power/condition types that provides a <code>damage_condition</code> object field.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's damage condition types for a list of damage condition types added by Origins/Apoli.</p>","boost":1},{"location":"types/damage_condition_types/#list","title":"List","text":"<ul> <li>NBT</li> <li>Projectile</li> </ul>","boost":1},{"location":"types/data_types/","title":"Data Types","text":"<p>Data types are used everywhere in JSON files. Every field in a JSON file have a specific type. For example, a page about a specific power type tells you which fields are supported and which data type they need to have.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's data types for a list of data types added by Origins/Apoli.</p>","boost":1},{"location":"types/data_types/#list","title":"List","text":"<ul> <li>Abstract Team</li> <li>Collision Rule</li> <li>Entity Offset</li> <li>Functional Key</li> <li>Generalized Positioned Item Stack</li> <li>Key</li> <li>Math Operation</li> <li>Perspective</li> <li>Positive Integer</li> <li>Render Mode</li> <li>Scoreboard</li> <li>Sound Category</li> <li>Visibility Rule</li> </ul>","boost":1},{"location":"types/dimension_type_condition_types/","title":"Dimension Type Condition Types","text":"<p>Dimension type condition types operate on a <code>RegistryEntry&lt;DimensionType&gt;</code>, allowing to check the dimension type properties of a certain dimension. These are available to power/condition types that provides a <code>dimension_type_condition</code> object field.</p>","boost":1},{"location":"types/dimension_type_condition_types/#list","title":"List","text":"<ul> <li>Ambient Light</li> <li>Bed Works</li> <li>Coordinate Scale</li> <li>Effects</li> <li>Fixed Time</li> <li>Has Ceiling</li> <li>Has Raids</li> <li>Has Skylight</li> <li>Height</li> <li>Infiniburn</li> <li>Is Natural</li> <li>Is Piglin Safe</li> <li>Is Ultrawarm</li> <li>Logical Height</li> <li>Min Y</li> <li>Monster Spawn Block Light Limit</li> <li>Respawn Anchor Works</li> </ul>","boost":1},{"location":"types/entity_action_types/","title":"Entity Action Types","text":"<p>Entity action types operate on an <code>Entity</code>. Some entity action types only affect certain entity types. These are available to power/action types that provides an <code>entity_action</code> object field.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's entity action types for a list of entity action types added by Origins/Apoli.</p>","boost":1},{"location":"types/entity_action_types/#list","title":"List","text":"<ul> <li>Calculate Resource</li> <li>Change Health</li> <li>Change Insomnia Ticks</li> <li>Clear Key Cache (DEPRECATED)</li> <li>Close Screen</li> <li>Damage</li> <li>Drop Inventory</li> <li>Fire Projectile</li> <li>Modify Health</li> <li>Modify Inventory</li> <li>Modify Key Sequence</li> <li>Open Inventory</li> <li>Play Sound</li> <li>Remove Power</li> <li>Replace Inventory</li> <li>Set Perspective</li> <li>Spawn Entity</li> </ul>","boost":1},{"location":"types/entity_condition_types/","title":"Entity Condition Types","text":"<p>Entity condition types operate on an <code>Entity</code>, which allows access to the <code>World</code>. These are used in most powers in the <code>condition</code> (or <code>entity_condition</code>, for other power/action/condition types) object field, which restricts when a power is active.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's entity condition types for a list of entity condition types added by Origins/Apoli.</p>","boost":1},{"location":"types/entity_condition_types/#list","title":"List","text":"<ul> <li>Block Collision</li> <li>Breaking Block</li> <li>Has Tag</li> <li>In Block</li> <li>In Screen</li> <li>In Team</li> <li>Inventory</li> <li>Permission Level</li> <li>Perspective</li> <li>Scoreboard</li> </ul>","boost":1},{"location":"types/item_condition_types/","title":"Item Condition Types","text":"<p>Item condition types operate on an <code>ItemStack</code>. These are available to power/action/condition types that provides an <code>item_condition</code> object field.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's item condition types for a list of item condition types added by Origins/Apoli.</p>","boost":1},{"location":"types/item_condition_types/#list","title":"List","text":"<ul> <li>Block Item</li> <li>Enchantment</li> <li>Tool</li> </ul>","boost":1},{"location":"types/meta_action_types/","title":"Meta Action Types","text":"<p>Meta action types are independent of the type they operate on, essentially combining or modifying other action types. The actions which are modified have to be of the type the field of the meta action type requires.</p> <p>For example, if you have a field which requires an entity action type and you plan to use the And (Meta Action Type), the action type provided inside the aforementioned meta action type has to be an entity action type.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's meta action types for a list of meta action types added by Origins/Apoli.</p>","boost":1},{"location":"types/meta_action_types/#list","title":"List","text":"<ul> <li>Loop</li> </ul>","boost":1},{"location":"types/meta_condition_types/","title":"Meta Condition Types","text":"<p>Meta condition types are independent of the type they operate on, essentially combining or modifying other condition types. The conditions which are modified have to be of the type the field of the meta condition type requires.</p> <p>For example, if you have a field that requires an entity condition type and you plan to use the And (Meta Condition Type), the condition type provided inside the aforementioned meta condition type has to be an entity condition type.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's meta condition types for a list of meta condition types added by Origins/Apoli.</p>","boost":1},{"location":"types/meta_condition_types/#list","title":"List","text":"<ul> <li>Chance</li> </ul>","boost":1},{"location":"types/power_types/","title":"Power Types","text":"<p>Power types are what grants functionality to powers. Each power has a type, specified with a <code>type</code> field in the JSON file. Which type a power is defines which other fields it requires and supports.</p> <p>Unless stated otherwise, each power type supports a <code>condition</code> object field that can check for entity condition types. See Power (JSON Format) for more details.</p> <p>Note</p> <p>See the documentation for Origins/Apoli's power types for a list of power types added by Origins/Apoli.</p>","boost":1},{"location":"types/power_types/#regular_types","title":"Regular types","text":"<ul> <li>Inventory</li> <li>Invisibility</li> <li>Model Flip</li> <li>Starting Equipment</li> </ul>","boost":1},{"location":"types/power_types/#action-related","title":"Action-related","text":"<ul> <li>Action on Block Place</li> <li>Action on Item Pickup</li> <li>Action on Key Sequence</li> <li>Game Event Listener</li> </ul>","boost":1},{"location":"types/power_types/#modifying_types","title":"Modifying types","text":"<ul> <li>Modify Breathing</li> <li>Modify Hurt Ticks</li> <li>Modify Label Render</li> </ul>","boost":1},{"location":"types/power_types/#preventing_types","title":"Preventing types","text":"<ul> <li>Prevent Block Place</li> <li>Prevent Item Pickup</li> <li>Prevent Item Use</li> </ul>","boost":1},{"location":"types/bientity_action_types/damage/","title":"Damage","text":"<p>Bi-entity Action Type</p> <p>Deals damage to the target entity as if the actor entity attacked it.</p> <p>Type ID: <code>eggolib:damage</code></p> <p>Note</p> <p>If the <code>modifier</code> field is specified, the max health of the target entity will be used as the base value in the modifier.</p>","boost":2},{"location":"types/bientity_action_types/damage/#fields","title":"Fields","text":"Field Type Default Description <code>amount</code> Float optional If specified, this amount of damage will be dealt to the target entity. <code>source</code> Damage Source Determines the source for the damage to be used. Controls the death message, invulnerabilities or whether armor should be taken into account. <code>modifier</code> Attribute Modifier optional If specified, this modifier and its value will be used as the amount of damage that will be dealt to the target entity.","boost":2},{"location":"types/bientity_action_types/damage/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"bientity_action\": {\n\"type\": \"eggolib:damage\",\n\"amount\": 2,\n\"source\": {\n\"name\": \"generic\"\n}\n}\n</code></pre> <p>This example will deal 2 (or 1 heart of) <code>generic</code> damage to the target entity.</p> <pre><code>\"bientity_action\": {\n\"type\": \"eggolib:damage\",\n\"source\": {\n\"name\": \"onFire\",\n\"fire\": true\n},\n\"modifier\": {\n\"operation\": \"multiply_total\",\n\"value\": 0.25\n}\n}\n</code></pre> <p>This example wil deal 25% <code>onFire</code> damage to the target entity. If the max health of the target entity is 20, this example will deal 5 (2 and a half hearts of) <code>onFire</code> damage.</p>","boost":2},{"location":"types/bientity_condition_types/compare_score/","title":"Compare Score","text":"<p>Bi-entity Condition Type</p> <p>Compares the score of the actor from a scoreboard objective to the score of the target from another scoreboard objective.</p> <p>Type ID: <code>eggolib:compare_score</code></p>","boost":2},{"location":"types/bientity_condition_types/compare_score/#fields","title":"Fields","text":"Field Type Default Description <code>actor_objective</code> String The name of the scoreboard objective that stores the score of the actor. <code>target_objective</code> String The name of the scoreboard objective that stores the score of the target. <code>comparison</code> Comparison <code>\"==\"</code> Determines how the scores of the actor and target are compared.","boost":2},{"location":"types/bientity_condition_types/compare_score/#examples","title":"Examples","text":"Example #1 <pre><code>\"bientity_condition\": {\n\"type\": \"eggolib:compare_score\",\n\"actor_objective\": \"a.id\",\n\"target_objective\": \"t.id\",\n\"comparison\": \"==\"\n}\n</code></pre> <p>This example will check if the score of the actor in the <code>a.id</code> scoreboard objective is equal to the score of the target in the <code>t.id</code> scoreboard objective.</p>","boost":2},{"location":"types/bientity_condition_types/has_matching_tag/","title":"Has Matching Tag","text":"<p>Bi-entity Condition Type</p> <p>Checks whether the actor entity and the target entity has matching scoreboard tag(s) (added via the <code>/tag</code> command).</p> <p>Type ID: <code>eggolib:has_matching_tag</code></p>","boost":2},{"location":"types/bientity_condition_types/has_matching_tag/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/bientity_condition_types/has_matching_tag/#examples","title":"Examples","text":"Example #1 <pre><code>\"bientity_condition\": {\n\"type\": \"eggolib:has_matching_tag\"\n}\n</code></pre>","boost":2},{"location":"types/block_action_types/area_of_effect/","title":"Area of Effect","text":"<p>Block Action Type</p> <p>Executes an action on blocks that are within the specified radius.</p> <p>Type ID: <code>eggolib:area_of_effect</code></p>","boost":2},{"location":"types/block_action_types/area_of_effect/#fields","title":"Fields","text":"Field Type Default Description <code>radius</code> Integer Determines the radius of the area to execute the action on. <code>shape</code> String <code>\"cube\"</code> Determines the shape of the area to execute the action on. Accepts one of <code>\"cube\"</code>, <code>\"star\"</code> or <code>\"sphere\"</code>. <code>block_action</code> Block Action The action to execute on the block(s) within the specified radius. <code>block_condition</code> [Block Condition][5] optional If specified, only execute the specified action on the block(s) that fulfills this condition.","boost":2},{"location":"types/block_action_types/area_of_effect/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"block_action\": {\n\"type\": \"eggolib:area_of_effect\",\n\"radius\": 16,\n\"shape\": \"cube\",\n\"block_action\": {\n\"type\": \"apoli:modify_block_state\",\n\"property\": \"waterlogged\",\n\"value\": false\n}\n}\n</code></pre> <p>This example will make all waterloggable blocks not waterlogged within 16 blocks radius with a shape of a cube.</p> <pre><code>\"block_action\": {\n\"type\": \"eggolib:area_of_effect\",\n\"radius\": 4,\n\"shape\": \"star\",\n\"block_action\": {\n\"type\": \"apoli:set_block\",\n\"block\": \"minecraft:air\"\n},\n\"block_condition\": {\n\"type\": \"apoli:in_tag\",\n\"tag\": \"minecraft:dragon_immune\",\n\"inverted\": true\n}\n}\n</code></pre> <p>This example will replace all blocks that aren't included in the <code>#minecraft:dragon_immune</code> block tag with Air within a 4 blocks radius with a shape of a star.</p>","boost":2},{"location":"types/block_condition_types/air/","title":"Air","text":"<p>Block Condition Type</p> <p>Checks if the block is air/void air/cave air.</p> <p>Type ID: <code>eggolib:air</code></p>","boost":2},{"location":"types/block_condition_types/air/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/block_condition_types/air/#examples","title":"Examples","text":"<pre><code>\"block_condition\": {\n\"type\": \"eggolib:air\"\n}\n</code></pre>","boost":2},{"location":"types/damage_condition_types/nbt/","title":"NBT","text":"<p>Damage Condition Type</p> <p>Checks the NBT of the entity of the damage source.</p> <p>Type ID: <code>eggolib:nbt</code></p> <p>Warning</p> <p>If the damage source does not originate from an entity, then this condition type will evaluate to false.</p>","boost":2},{"location":"types/damage_condition_types/nbt/#fields","title":"Fields","text":"Field Type Default Description <code>nbt</code> String The NBT data to check for.","boost":2},{"location":"types/damage_condition_types/nbt/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"damage_condition\": {\n\"type\": \"eggolib:nbt\",\n\"nbt\": \"{Tags: [\\\"hitter\\\"]}\"\n}\n</code></pre> <p>This example will check if the entity of the damage source has a <code>hitter</code> tag added via the <code>/tag</code> command.</p> <pre><code>\"damage_condition\": {\n\"type\": \"apoli:and\",\n\"conditions\": [\n{\n\"type\": \"apoli:projectile\",\n\"projectile\": \"minecraft:snowball\"\n},\n{\n\"type\": \"eggolib:nbt\",\n\"nbt\": \"{Item: {tag: {customProjectile: 1b}}}\"\n}\n]\n}\n</code></pre> <p>This example will check if the damage source originated from a Snowball projectile that has a <code>customProjectile</code> item NBT with a value of <code>1b</code>.</p>","boost":2},{"location":"types/damage_condition_types/projectile/","title":"Projectile","text":"<p>Damage Condition Type</p> <p>Checks whether the damage source is projectile damage; can also optionally check the type(s) of projectile or its NBT.</p> <p>Type ID: <code>eggolib:projectile</code></p>","boost":2},{"location":"types/damage_condition_types/projectile/#fields","title":"Fields","text":"Field Type Default Description <code>projectile</code> Identifier optional If specified, the condition will evaluate to true if the projectile matches this entity type identifier. <code>projectiles</code> Array of Identifiers optional If specified, the condition will evaluate to true if the projectile matches any of these entity type identifiers. <code>nbt</code> String optional If specified, the condition will evaluate to true if the projectile has this NBT data.","boost":2},{"location":"types/damage_condition_types/projectile/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"damage_condition\": {\n\"type\": \"eggolib:projectile\",\n\"nbt\": \"{Item: {tag: {heavyProjectile: 1b}}}\"\n}\n</code></pre> <p>This example will check if the damage source is of a projectile that has the <code>{Item: {tag: {heavyProjectile: 1b}}}</code> NBT.</p> <pre><code>\"damage_condition\": {\n\"type\": \"eggolib:projectile\",\n\"projectiles\": [\n\"minecraft:arrow\",\n\"minecraft:spectral_arrow\",\n\"minecraft:snowball\",\n\"minecraft:llama_spit\"\n]\n}\n</code></pre> <p>This example will check if the damage source is of a projectile that's either an Arrow, a Spectral Arrow, a Snowball or a Llama Spit.</p>","boost":2},{"location":"types/data_types/abstract_team/","title":"Abstract Team","text":"<p>Data Type</p> <p>An object used for abstractly representing a team.</p>","boost":2},{"location":"types/data_types/abstract_team/#fields","title":"Fields","text":"Field Type Default Description <code>name</code> String optional The name of the team. <code>friendly_fire</code> Boolean optional Determines whether the team should allow friendly fire or not. <code>show_friendly_invisibles</code> Boolean optional Determines whether the team should show teammates that are invisible. <code>nametag_visibility</code> Visibility Rule optional Determines the visibility for the nametag of the entities within the team. <code>death_message_visibility</code> Visibility Rule optional Determines the visibility for the death message of the entities within the team. <code>collision_rule</code> Collision Rule optional Determines how entity collision behaves for the entities within the team.","boost":2},{"location":"types/data_types/abstract_team/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"team\": {\n\"name\": \"epicGamers\"\n}\n</code></pre> <p>This example abstractly represents a team with the name \"epicGamers\".</p> <pre><code>\"team\": {\n\"nametag_visibility\": \"never\"\n}\n</code></pre> <p>This example abstractly represents a team with the <code>nametagVisibility</code> option set to <code>never</code>.</p>","boost":2},{"location":"types/data_types/collision_rule/","title":"Collision Rule","text":"<p>Data Type</p> <p>A string used to determine how collision works in a team.</p> <p>Caution</p> <p>Currently, the <code>pushOtherTeams</code> and <code>pushOwnTeam</code> collision rules have the opposite effect due to MC-87984.</p>","boost":2},{"location":"types/data_types/collision_rule/#values","title":"Values","text":"Value Description <code>always</code> The default behavior. <code>never</code> No entities can push entities in the team. <code>pushOtherTeams</code> Only entities from another team can push the entities in the team. <code>pushOwnTeam</code> Only entities in the team can push each other.","boost":2},{"location":"types/data_types/entity_offset/","title":"Entity Offset","text":"<p>Data Type</p> <p>A string used to determine the offset reference position point of an entity.</p>","boost":2},{"location":"types/data_types/entity_offset/#values","title":"Values","text":"<ul> <li><code>\"eyes\"</code></li> <li><code>\"feet\"</code></li> </ul>","boost":2},{"location":"types/data_types/functional_key/","title":"Functional Key","text":"<p>Data Type</p> <p>An object or string used for representing a keybind. If formatted as an object, this data type can execute an Entity Action Type.</p>","boost":2},{"location":"types/data_types/functional_key/#fields","title":"Fields","text":"Field Type Default Description <code>key</code> String The name of the keybind. <code>continuous</code> Boolean <code>false</code> Determines if the keybind can be pressed continuously if held. <code>action</code> Entity Action optional If specified, this action will be executed on the player upon pressing the specified keybind.","boost":2},{"location":"types/data_types/functional_key/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"keys\": [\n\"key.forward\"\n]\n</code></pre> <p>This example represents the <code>key.forward</code> keybind, with its <code>continuous</code> and <code>action</code> fields having its default values:  <code>false</code> and <code>null</code> respectively.</p> <pre><code>\"keys\": [\n{\n\"key\": \"key.jump\",\n\"continuous\": false,\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"me jumped!\"\n}\n}\n]\n</code></pre> <p>This example represents the <code>key.jump</code> keybind. Upon pressing the specified keybind, this will execute a <code>/me jumped!</code> command.</p>","boost":2},{"location":"types/data_types/generalized_positioned_item_stack/","title":"Generalized Positioned Item Stack","text":"<p>Data Type</p> <p>An object that defines an item stack alongside a position in an inventory; generalized to all entities that may have a stack reference.</p> <p>Note</p> <p>Refer to Minecraft Fandom: Slot (Command argument) for the string values you can use in the <code>slot</code> field of this data type.</p>","boost":2},{"location":"types/data_types/generalized_positioned_item_stack/#fields","title":"Fields","text":"Field Type Default Description <code>item</code> Identifier The namespace and ID of the item. <code>amount</code> Integer <code>1</code> The size of the item. <code>tag</code> String optional The NBT data of the item. <code>slot</code> String optional The position for the item in the inventory of an entity.","boost":2},{"location":"types/data_types/generalized_positioned_item_stack/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"stack\": {\n\"item\": \"minecraft:diamond\",\n\"amount\": 16\n}\n</code></pre> <p>This example will define a new Diamond item stack with a size of 16.</p> <pre><code>\"stacks\": [\n{\n\"item\": \"minecraft:shield\",\n\"slot\": \"weapon.offhand\"\n},\n{\n\"item\": \"minecraft:iron_sword\",\n\"slot\": \"weapon.mainhand\"\n}\n]\n</code></pre> <p>This example will define two new item stacks: a Shield that will be placed in the offhand equipment slot of the entity and an Iron Sword that will be placed in the mainhand equipment slot of the entity.</p>","boost":2},{"location":"types/data_types/key/","title":"Key","text":"<p>Data Type</p> <p>An object or string used for representing a keybind. This data type is only a placeholder.</p>","boost":2},{"location":"types/data_types/key/#fields","title":"Fields","text":"Fields Type Default Description <code>key</code> String The name of the keybind.","boost":2},{"location":"types/data_types/key/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"keys\": [\n\"key.attack\"\n]\n</code></pre> <p>This example represents the <code>key.attack</code> keybind.</p> <pre><code>\"keys\": [\n{\n\"key\": \"key.jump\"\n}\n]\n</code></pre> <p>This example represents the <code>key.jump</code> keybind.</p>","boost":2},{"location":"types/data_types/math_operation/","title":"Math Operation","text":"<p>Data Type</p> <p>A string used to determine how an integer should be operated with another integer.</p>","boost":2},{"location":"types/data_types/math_operation/#values","title":"Values","text":"Value Description <code>add</code> Adds the integer to another integer. <code>divide</code> Divides the integer by another integer. <code>max</code> Returns the greater of the two integer values. <code>min</code> Returns the smaller of the two integer values. <code>modulo</code> Returns the floored remainder by dividing the integer by another integer. <code>multiply</code> Multiply the integer to another integer. <code>set</code> Replace the integer with another integer. <code>subtract</code> Subtract the integer from another integer.","boost":2},{"location":"types/data_types/perspective/","title":"Perspective","text":"<p>Data Type</p> <p>A string used to determine the perspective (e.g: the angle of the camera) of player.</p>","boost":2},{"location":"types/data_types/perspective/#values","title":"Values","text":"<ul> <li><code>first_person</code></li> <li><code>third_person_back</code></li> <li><code>third_person_front</code></li> </ul>","boost":2},{"location":"types/data_types/positive_integer/","title":"Positive Integer","text":"<p>Data Type</p> <p>A whole number, like 3 or 10, that cannot be negative.</p>","boost":2},{"location":"types/data_types/positive_integer/#examples","title":"Examples","text":"Example #1 <pre><code>{\n\"type\": \"eggolib:game_event_listener\",\n\"range\": 16\n}\n</code></pre> <p>This example is a power that uses the Game Event Listener (Power Type) with a <code>range</code> value of <code>16</code>, which is a positive integer.</p>","boost":2},{"location":"types/data_types/render_mode/","title":"Render Mode","text":"<p>Data Type</p> <p>A string used to determine how a component is rendered.</p>","boost":2},{"location":"types/data_types/render_mode/#values","title":"Values","text":"Value Description <code>default</code> Renders the component as is. <code>hide_partially</code> Renders the component semi-transparently. <code>hide_completely</code> Does not render the component at all.","boost":2},{"location":"types/data_types/scoreboard/","title":"Scoreboard","text":"<p>Data Type</p> <p>An object used for getting the score of a score holder from a scoreboard objective.</p> <p>Note</p> <p>If the score holder referenced in the <code>name</code> field does not exist, the data type will return a value of 0.</p> <p>Caution</p> <p>Currently, the <code>name</code> field of the data type does not accept target selectors.</p>","boost":2},{"location":"types/data_types/scoreboard/#fields","title":"Fields","text":"Field Type Default Description <code>name</code> String The name of the score holder. <code>objective</code> String The name of the scoreboard objective.","boost":2},{"location":"types/data_types/scoreboard/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"score\": {\n\"name\": \"aTestScoreHolder\",\n\"objective\": \"example\"\n}\n</code></pre> <p>This example will get the score of the <code>aTestScoreHolder</code> score holder from the <code>example</code> scoreboard objective.</p> <pre><code>\"score\": {\n\"name\": \"#hiddenScoreHolder\",\n\"objective\": \"example\"\n}\n</code></pre> <p>This example will get the score of the <code>#hiddenScoreHolder</code> score holder from the <code>example</code> scoreboard objective.</p>","boost":2},{"location":"types/data_types/sound_category/","title":"Sound Category","text":"<p>[Data Type][1]</p> <p>A [string][2] used for grouping sound events together.</p>","boost":2},{"location":"types/data_types/sound_category/#values","title":"Values","text":"<ul> <li><code>ambient</code></li> <li><code>blocks</code></li> <li><code>hostile</code></li> <li><code>master</code></li> <li><code>music</code></li> <li><code>neutral</code></li> <li><code>players</code></li> <li><code>records</code></li> <li><code>voice</code></li> <li><code>weather</code></li> </ul>","boost":2},{"location":"types/data_types/visibility_rule/","title":"Visibility Rule","text":"<p>Data Type</p> <p>A string used to determine how visibility of certain components works in a team.</p>","boost":2},{"location":"types/data_types/visibility_rule/#values","title":"Values","text":"Value Description <code>always</code> The default behavior. <code>never</code> No entities can see the component. <code>hideForOtherTeams</code> Only entities in the team can see the component. <code>hideForOwnTeam</code> Only entities from another team can see the component.","boost":2},{"location":"types/dimension_type_condition_types/ambient_light/","title":"Ambient Light","text":"<p>Dimension Type Condition Type</p> <p>Compares the ambient light property of the dimension to the specified value.</p> <p>Type ID: <code>eggolib:ambient_light</code></p>","boost":2},{"location":"types/dimension_type_condition_types/ambient_light/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison Determines how the ambient light property of the dimension is compared to the specified value. <code>compare_to</code> Float The value which the ambient light property of the dimension is compared to.","boost":2},{"location":"types/dimension_type_condition_types/ambient_light/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:ambient_light\",\n\"comparison\": \"==\",\n\"compare_to\": 0.0\n}\n</code></pre> <p>This example will check if the dimension has no ambient light. For instance, the Overworld and The End dimensions fulfill this condition.</p> <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:ambient_light\",\n\"comparison\": \"&gt;=\",\n\"compare_to\": 0.1\n}\n</code></pre> <p>This example will check if the dimension has an ambient light of 0.1 or higher. For instance, The Nether dimension fulfills this condition.</p>","boost":2},{"location":"types/dimension_type_condition_types/bed_works/","title":"Bed Works","text":"<p>Dimension Type Condition Type</p> <p>Checks if beds work in the dimension.</p> <p>Type ID: <code>eggolib:bed_works</code></p>","boost":2},{"location":"types/dimension_type_condition_types/bed_works/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/bed_works/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:bed_works\"\n}\n</code></pre>","boost":2},{"location":"types/dimension_type_condition_types/coordinate_scale/","title":"Coordinate Scale","text":"<p>Dimension Type Condition Type</p> <p>Compares the value used for scaling the coordinates of an entity when entering/leaving the dimension to the specified value.</p> <p>Type ID: <code>eggolib:coordinate_scale</code></p>","boost":2},{"location":"types/dimension_type_condition_types/coordinate_scale/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison Determines how the coordinate scale property of the dimension is compared to the specified value. <code>compare_to</code> Float The value which the coordinate scale property of the dimension is compared to.","boost":2},{"location":"types/dimension_type_condition_types/coordinate_scale/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:coordinate_scale\",\n\"comparison\": \"==\",\n\"compare_to\": 1\n}\n</code></pre> <p>This example will check if the scaling coordinate value of the dimension is 1. For instance, the Overworld and The End dimensions will fulfill this condition.</p> <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:coordinate_scale\",\n\"comparison\": \"&gt;=\",\n\"compare_to\": 8\n}\n</code></pre> <p>This example will check if the scaling coordinate value of the dimension is 8. For instance, The Nether fulfills this condition.</p>","boost":2},{"location":"types/dimension_type_condition_types/effects/","title":"Effects","text":"<p>Dimension Type Condition Type</p> <p>Checks if the identifier of the effects of the dimension matches the specified identifier.</p> <p>Type ID: <code>eggolib:effects</code></p> <p>Note</p> <p>See Minecraft Fandom Wiki: Effect (dimension) for more information about dimension effects.</p>","boost":2},{"location":"types/dimension_type_condition_types/effects/#fields","title":"Fields","text":"Field Type Default Description <code>id</code> Identifier The identifier of the dimension effects property to check for.","boost":2},{"location":"types/dimension_type_condition_types/effects/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:effects\",\n\"id\": \"minecraft:the_end\"\n}\n</code></pre> <p>This example will check if the dimension has The End dimension's effects.</p>","boost":2},{"location":"types/dimension_type_condition_types/fixed_time/","title":"Fixed Time","text":"<p>Dimension Type Condition Type</p> <p>Compares the fixed time property of the dimension to the specified value.</p> <p>Type ID: <code>eggolib:fixed_time</code></p> <p>Note</p> <p>If neither the <code>comparison</code> and <code>compare_to</code> is present, this dimension type condition type will check if the dimension has a fixed time.</p>","boost":2},{"location":"types/dimension_type_condition_types/fixed_time/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison optional Determines how the fixed time property of the dimension is compared to the specified value. <code>compare_to</code> Integer optional The value which the fixed time property of the dimension is compared to.","boost":2},{"location":"types/dimension_type_condition_types/fixed_time/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:fixed_time\"\n}\n</code></pre> <p>This example will check if the dimension has a fixed time.</p> <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:fixed_time\",\n\"comparison\": \"==\",\n\"compare_to\": 18000\n}\n</code></pre> <p>This example will check if the dimension has its time fixed at midnight.</p>","boost":2},{"location":"types/dimension_type_condition_types/has_ceiling/","title":"Has Ceiling","text":"<p>Dimension Type Condition Type</p> <p>Checks if the dimension has a Bedrock ceiling.</p> <p>Type ID: <code>eggolib:has_ceiling</code></p>","boost":2},{"location":"types/dimension_type_condition_types/has_ceiling/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/has_ceiling/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:has_ceiling\"\n}\n</code></pre>","boost":2},{"location":"types/dimension_type_condition_types/has_raids/","title":"Has Raids","text":"<p>Dimension Type Condition Type</p> <p>Checks if the dimension can initiate raids.</p> <p>Type ID: <code>eggolib:has_raids</code></p>","boost":2},{"location":"types/dimension_type_condition_types/has_raids/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/has_raids/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:has_raids\"\n}\n</code></pre>","boost":2},{"location":"types/dimension_type_condition_types/has_skylight/","title":"Has Skylight","text":"<p>Dimension Type Condition Type</p> <p>Checks if the dimension has skylight.</p> <p>Type ID: <code>eggolib:has_skylight</code></p>","boost":2},{"location":"types/dimension_type_condition_types/has_skylight/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/has_skylight/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:has_skylight\"\n}\n</code></pre>","boost":2},{"location":"types/dimension_type_condition_types/height/","title":"Height","text":"<p>Dimension Type Condition Type</p> <p>Compares the maximum height in which blocks can exist of the dimension to the specified value.</p> <p>Type ID: <code>eggolib:height</code></p>","boost":2},{"location":"types/dimension_type_condition_types/height/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison Determines how the maximum height in which blocks can exist of the dimension is compared to the specified value. <code>compare_to</code> Integer The value which the maximum height in which blocks can exist of the dimension is compared to.","boost":2},{"location":"types/dimension_type_condition_types/height/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:height\",\n\"comparison\": \"==\",\n\"compare_to\": 384\n}\n</code></pre> <p>This example will check if the maximum height of the dimension is 384. For instance, the Overworld dimension fulfills this condition.</p> <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:height\",\n\"comparison\": \"&lt;=\",\n\"compare_to\": 256\n}\n</code></pre> <p>This example will check if the maximum height of the dimension is equal to or less than 256. For instance, The Nether dimension fulfills this condition.</p>","boost":2},{"location":"types/dimension_type_condition_types/infiniburn/","title":"Infiniburn","text":"<p>Dimension Type Condition Type</p> <p>Checks if the dimension is using the specified block tag for setting blocks on fire forever until extinguished manually.</p> <p>Type ID: <code>eggolib:infiniburn</code></p>","boost":2},{"location":"types/dimension_type_condition_types/infiniburn/#fields","title":"Fields","text":"Field Type Default Description <code>tag</code> Identifier The identifier of the block tag to check for.","boost":2},{"location":"types/dimension_type_condition_types/infiniburn/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:infiniburn\",\n\"tag\": \"minecraft:infiniburn_overworld\"\n}\n</code></pre> <p>This example will check if the dimension is using the <code>#minecraft:infiniburn_overworld</code> block tag for blocks that burn forever.</p>","boost":2},{"location":"types/dimension_type_condition_types/is_natural/","title":"Is Natural","text":"<p>Dimension Type Condition Type</p> <p>Checks if the dimension is considered \"natural\".</p> <p>Type ID: <code>eggolib:is_natural</code></p> <p>Note</p> <p>A dimension may be considered \"unnatural\" if a Compass spin randomly, if beds cannot be used for sleeping/setting the spawnpoint and if Zombified Piglins do not spawn from Nether portals.</p>","boost":2},{"location":"types/dimension_type_condition_types/is_natural/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/is_natural/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:is_natural\"\n}\n</code></pre>","boost":2},{"location":"types/dimension_type_condition_types/is_piglin_safe/","title":"Is Piglin Safe","text":"<p>Dimension Type Condition Type</p> <p>Checks if the dimension do not zombify and shake Piglins and Hoglins.</p> <p>Type ID: <code>eggolib:is_piglin_safe</code></p>","boost":2},{"location":"types/dimension_type_condition_types/is_piglin_safe/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/is_piglin_safe/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:is_piglin_safe\"\n}\n</code></pre>","boost":2},{"location":"types/dimension_type_condition_types/is_ultrawarm/","title":"Is Ultrawarm","text":"<p>Dimension Type Condition Type</p> <p>Checks if the dimension behaves like The Nether, where sponges and water dry and lava moves faster.</p> <p>Type ID: <code>eggolib:is_ultrawarm</code></p>","boost":2},{"location":"types/dimension_type_condition_types/is_ultrawarm/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/is_ultrawarm/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:is_ultrawarm\"\n}\n</code></pre>","boost":2},{"location":"types/dimension_type_condition_types/logical_height/","title":"Logical Height","text":"<p>Dimension Type Condition Type</p> <p>Compares the maximum logical height (for Nether portals and Chorus Fruits) of the dimension to the specified value.</p> <p>Type ID: <code>eggolib:logical_height</code></p>","boost":2},{"location":"types/dimension_type_condition_types/logical_height/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison Determines how the maximum logical height of the dimension is compared to the value. <code>compare_to</code> Integer The value which the maximum logical height of the dimension is compared to.","boost":2},{"location":"types/dimension_type_condition_types/logical_height/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:logical_height\",\n\"comparison\": \"==\",\n\"compare_to\": 384\n}\n</code></pre> <p>This example will check if the maximum logical height of the dimension is 384. For instance, the Overworld dimension fulfills this condition.</p> <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:logical_height\",\n\"comparison\": \"&lt;=\",\n\"compare_to\": 256\n}\n</code></pre> <p>This example will check if the maximum logical height of the dimension is 384 or less. For instance, The Nether dimension fulfills this condition.</p>","boost":2},{"location":"types/dimension_type_condition_types/min_y/","title":"Min Y","text":"<p>Dimension Type Condition Type</p> <p>Compares the minimum height in which blocks can exist of the dimension to the specified value.</p> <p>Type ID: <code>eggolib:min_y</code></p>","boost":2},{"location":"types/dimension_type_condition_types/min_y/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison Determines how the minimum height of the dimension is compared to the specified value. <code>compare_to</code> Integer The value which the minimum height of the dimension is compared to.","boost":2},{"location":"types/dimension_type_condition_types/min_y/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:min_y\",\n\"comparison\": \"&lt;\",\n\"compare_to\": 0\n}\n</code></pre> <p>This example will check if the minimum height of the dimension is less than 0. For instance, the Overworld dimension fulfills this condition.</p>","boost":2},{"location":"types/dimension_type_condition_types/monster_spawn_block_light_limit/","title":"Monster Spawn Block Light Limit","text":"<p>Dimension Type Condition Type</p> <p>Compares the maximum required block light for spawning mobs of the dimension to the specified value.</p> <p>Type ID: <code>eggolib:monster_spawn_block_light_limit</code></p>","boost":2},{"location":"types/dimension_type_condition_types/monster_spawn_block_light_limit/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison Determines how the maximum required block light for spawning mobs of the dimension is compared to the specified value. <code>compare_to</code> Integer The value which the maximum required block light for spawning mobs of the dimension is compared to.","boost":2},{"location":"types/dimension_type_condition_types/monster_spawn_block_light_limit/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:monster_spawn_block_light_limit\",\n\"comparison\": \"==\",\n\"compare_to\": 0\n}\n</code></pre> <p>This example will check if the maximum required block light for spawning mobs in the dimension is 0. For instance, the Overworld dimension fulfills this condition.</p>","boost":2},{"location":"types/dimension_type_condition_types/respawn_anchor_works/","title":"Respawn Anchor Works","text":"<p>Dimension Type Condition Type</p> <p>Checks if Respawn Anchor works in the dimension.</p> <p>Type ID: <code>eggolib:respawn_anchor_works</code></p>","boost":2},{"location":"types/dimension_type_condition_types/respawn_anchor_works/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/dimension_type_condition_types/respawn_anchor_works/#examples","title":"Examples","text":"Example #1 <pre><code>\"dimension_type_condition\": {\n\"type\": \"eggolib:respawn_anchor_works\"\n}\n</code></pre>","boost":2},{"location":"types/entity_action_types/calculate_resource/","title":"Calculate Resource","text":"<p>Entity Action Type</p> <p>Calculates the value of a power that uses the Resource (Power Type) from the value of another power that uses the Resource (Power Type).</p> <p>Type ID: <code>eggolib:calculate_resource</code></p>","boost":2},{"location":"types/entity_action_types/calculate_resource/#fields","title":"Fields","text":"Field Type Default Description <code>target</code> Identifier The namespace, path and ID of the power to calculate the value of. <code>operation</code> Math Operation <code>\"add\"</code> Determines how the value of the source power will be calculated to the value of the target power. <code>source</code> Identifier The namespace, path and ID of the power to use the value of.","boost":2},{"location":"types/entity_action_types/calculate_resource/#examples","title":"Examples","text":"<pre><code>\"entity_action\": {\n\"type\": \"eggolib:calculate_resource\",\n\"target\": \"example:resource_a\",\n\"operation\": \"multiply\",\n\"source\": \"example:resource_b\"\n}\n</code></pre> <p>This example will multiply the value of the <code>example:resource_a</code> (<code>data/example/powers/resource_a.json</code>) power by the value of the <code>example:resource_b</code> (<code>data/example/powers/resource_b.json</code>) power.</p>","boost":2},{"location":"types/entity_action_types/change_health/","title":"Change Health","text":"<p>Entity Action Type</p> <p>Changes the health of the entity.</p> <p>Type ID: <code>eggolib:change_health</code></p>","boost":2},{"location":"types/entity_action_types/change_health/#fields","title":"Fields","text":"Field Type Default Description <code>change</code> Float The value to be used for modifying the entity's health. <code>operation</code> String] <code>\"add\"</code> Determines how the specified value will be operated on the entity's health. Accepts one of <code>\"add\"</code> and <code>\"set\"</code>.","boost":2},{"location":"types/entity_action_types/change_health/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:change_health\",\n\"change\": 1,\n\"operation\": \"add\"\n}\n</code></pre> <p>This example will add 1 to the entity's health.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:change_health\",\n\"change\": 10,\n\"operation\": \"set\"\n}\n</code></pre> <p>This example will set the entity's health to 10.</p>","boost":2},{"location":"types/entity_action_types/change_insomnia_ticks/","title":"Change Insomnia Ticks","text":"<p>Entity Action Type</p> <p>Changes the value of the <code>minecraft.custom:minecraft.time_since_rest</code> statistic of the player.</p> <p>Type ID: <code>eggolib:change_insomnia_ticks</code></p>","boost":2},{"location":"types/entity_action_types/change_insomnia_ticks/#fields","title":"Fields","text":"Field Type Default Description <code>change</code> Integer The value to be used for changing the value of the player's <code>minecraft.custom:minecraft.time_since_rest</code> statistic. <code>operation</code> String <code>\"add\"</code> Determines how the specified value will be operated on the value of the player's <code>minecraft.custom:minecraft.time_since_rest</code> statistic. Accepts one of <code>\"add\"</code> and <code>\"set\"</code>.","boost":2},{"location":"types/entity_action_types/change_insomnia_ticks/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:change_insomnia_ticks\",\n\"change\": 24000,\n\"operation\": \"add\"\n}\n</code></pre> <p>This example will add 24000 to the the value of the player's <code>minecraft.custom:minecraft.time_since_rest</code> statistic, essentially adding 1 day.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:change_insomnia_ticks\",\n\"change\": 0,\n\"operation\": \"set\"\n}\n</code></pre> <p>This example will set the the value of the player's <code>minecraft.custom:minecraft.time_since_rest</code> statistic to 0.</p>","boost":2},{"location":"types/entity_action_types/clear_key_cache/","title":"Clear Key Cache","text":"<p>Entity Action Type</p> <p>Clears the key sequence cache of a power that uses the Action on Key Sequence (Power Type).</p> <p>Type ID: <code>eggolib:clear_key_cache</code></p> <p>Danger</p> <p>This entity action type has been deprecated and will be removed in a future version. Please use Modify Key Sequence (Entity Action Type) instead.</p>","boost":2},{"location":"types/entity_action_types/clear_key_cache/#fields","title":"Fields","text":"Field Type Default Description <code>power</code> Identifier The namespace and ID of the power to clear the key sequence cache of.","boost":2},{"location":"types/entity_action_types/clear_key_cache/#examples","title":"Examples","text":"Example #1 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:clear_key_cache\",\n\"power\": \"example:power\"\n}\n</code></pre> <p>This example will clear the key sequence cache of the <code>example:power</code> (<code>data/example/powers/power.json</code>) power.</p>","boost":2},{"location":"types/entity_action_types/close_screen/","title":"Close Screen","text":"<p>Entity Action Type</p> <p>Closes the current screen of the player.</p> <p>Type ID: <code>eggolib:close_screen</code></p>","boost":2},{"location":"types/entity_action_types/close_screen/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/entity_action_types/close_screen/#examples","title":"Examples","text":"<pre><code>\"entity_action\": {\n\"type\": \"eggolib:close_screen\"\n}\n</code></pre>","boost":2},{"location":"types/entity_action_types/damage/","title":"Damage","text":"<p>Entity Action Type</p> <p>Deals damage to the entity.</p> <p>Type ID: <code>eggolib:damage</code></p> <p>Note</p> <p>If the <code>modifier</code> field is specified, the max health of the entity will be used as the base value in the modifier.</p>","boost":2},{"location":"types/entity_action_types/damage/#fields","title":"Fields","text":"Field Type Default Description <code>amount</code> Float optional If specified, this amount of damage will be dealt to the entity. <code>source</code> Damage Source Determines the source for the damage to be used. Controls the death message, invulnerabilities or whether the armor should be taken into account. <code>modifier</code> Attribute Modifier optional If specified, this modifier and its value will be used as the amount of damage that will be dealt to the entity.","boost":2},{"location":"types/entity_action_types/damage/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:damage\",\n\"amount\": 2,\n\"source\": {\n\"name\": \"generic\"\n}\n}\n</code></pre> <p>This example will deal 2 (or 1 heart of) <code>generic</code> damage to the entity.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:damage\",\n\"source\": {\n\"name\": \"onFire\",\n\"fire\": true\n},\n\"modifier\": {\n\"operation\": \"multiply_total\",\n\"value\": 0.25\n}\n}\n</code></pre> <p>This example will deal 25% <code>onFire</code> damage to the entity. If the max health of the entity is 20, this example will deal 5 (2 and a half hearts of) <code>onFire</code> damage.</p>","boost":2},{"location":"types/entity_action_types/drop_inventory/","title":"Drop Inventory","text":"<p>Entity Action Type</p> <p>Drops the item(s) from either the entity's inventory or a power that uses the Inventory (Power Type) or Origins/Apoli's Inventory (Power Type).</p> <p>Type ID: <code>eggolib:drop_inventory</code></p>","boost":2},{"location":"types/entity_action_types/drop_inventory/#fields","title":"Fields","text":"Field Type Default Description <code>inventory_type</code> Inventory Type <code>\"inventory\"</code> Determines whether to drop the items from the inventory of the entity or the inventory of a power present in the entity. <code>entity_action</code> Entity Action] optional If specified, this action will be executed on the entity before the items are dropped. <code>item_action</code> Item Action] optional If specified, this action will be executed on the affected items before the said items are dropped <code>item_condition</code> Item Condition optional If specified, only items which fulfill this condition will be dropped. <code>slot</code> Identifier optional If specified, only items in the designated slot will be dropped. See Positioned Item Stack Slots for possible values. <code>slots</code> Array of Identifiers optional If specified, only items in the designated slots will be dropped. See Positioned Item Stack Slots for possible values. <code>power</code> Identifier optional If specified and if <code>inventory_type</code> is set to <code>\"power\"</code>, the items in the inventory of this power will be dropped instead of the items in the entity's inventory. <code>amount</code> Integer optional If specified, the affected items will be split by this amount.","boost":2},{"location":"types/entity_action_types/drop_inventory/#examples","title":"Examples","text":"Example #1Example #2Example #3 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:drop_inventory\"\n}\n</code></pre> <p>This example will drop the entire inventory of the entity.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:drop_inventory\",\n\"item_condition\": {\n\"type\": \"apoli:amount\",\n\"comparison\": \"&gt;=\",\n\"compare_to\": 10\n}\n}\n</code></pre> <p>This example will drop items from the inventory of the entity only if those items have an amount of 10 or greater.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:drop_inventory\",\n\"slot\": \"weapon.mainhand\",\n\"amount\": 16\n}\n</code></pre> <p>This example will split the item from the entity's mainhand slot by 16 and drop it. For a further explanation, if the item from the entity's mainhand slot has a count of 64, only 16 of it will be dropped, making the item have a remainder of 48. (64 - 16 = 48)</p>","boost":2},{"location":"types/entity_action_types/fire_projectile/","title":"Fire Projectile","text":"<p>Entity Action Type</p> <p>Fires one or more projectiles or entities.</p> <p>Type ID: <code>eggolib:fire_projectile</code></p> <p>Note</p> <p>This action type can spawn in entities with passengers.</p>","boost":2},{"location":"types/entity_action_types/fire_projectile/#fields","title":"Fields","text":"Field Type Default Description <code>entity_type</code> Identifier The identifier of the projectile or entity that will be launched. <code>divergence</code> Float <code>1.0</code> Determines how much the projectile or entity that will be launched is affected by random spread. <code>speed</code> Float <code>1.0</code> Determines the speed of the projectile or entity that will be launched. <code>count</code> Integer <code>1</code> Determines the amount of projectiles or entities that will be launched. <code>tag</code> String optional If specified, this NBT data will be added to the projectile or entity that will be launched. <code>entity_action</code> Entity Action Type optional If specified, this action will be executed on the projectile or entity that will be launched.","boost":2},{"location":"types/entity_action_types/fire_projectile/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:fire_projectile\",\n\"entity_type\": \"minecraft:fireball\"\n}\n</code></pre> <p>This example will launch a Fireball in the direction the entity is facing.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:fire_projectile\",\n\"entity_type\": \"minecraft:pig\",\n\"tag\": \"{Passengers: [{id: \\\"minecraft:armor_stand\\\"}]}\"\n}\n</code></pre> <p>This example will launch a Pig with an Armor Stand passenger.</p>","boost":2},{"location":"types/entity_action_types/modify_health/","title":"Modify Health","text":"<p>Entity Action Type</p> <p>Modifies the current health of the entity.</p> <p>Type ID: <code>eggolib:modify_health</code></p> <p>Note</p> <p>The max health of the entity will be used as the base value for the modifier.</p>","boost":2},{"location":"types/entity_action_types/modify_health/#fields","title":"Fields","text":"Field Type Default Description <code>modifier</code> Attribute Modifier The modifier to use for modifying the current health of the entity.","boost":2},{"location":"types/entity_action_types/modify_health/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:modify_health\",\n\"modifier\": {\n\"operation\": \"add_base_early\",\n\"value\": -2\n}\n}\n</code></pre> <p>This example will subtract 2 (or 1 heart) from the entity's current health.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:modify_health\",\n\"modifier\": {\n\"operation\": \"multiply_total\",\n\"value\": -0.25\n}\n}\n</code></pre> <p>This example will subtract 25% from the entity's current health. If the max health of the entity is 20, this example will subtract 5 (or 2 and a half hearts) from the entity's current health.</p>","boost":2},{"location":"types/entity_action_types/modify_inventory/","title":"Modify Inventory","text":"<p>Entity Action Type</p> <p>Modifies the item(s) from either the entity's inventory or a power that uses the Inventory (Power Type) or Origins/Apoli's Inventory (Power Type).</p> <p>Type ID: <code>eggolib:modify_inventory</code></p>","boost":2},{"location":"types/entity_action_types/modify_inventory/#fields","title":"Fields","text":"Field Type Default Description <code>inventory_type</code> Inventory Type <code>\"inventory\"</code> Determines whether to modify the items in the inventory of the entity or the inventory of a power present in the entity. <code>entity_action</code> Entity Action optional If specified, this action will be executed on the entity before the items are modified. <code>item_action</code> Item Action The action to execute on the affected items. <code>item_condition</code> Item Condition optional If specified, only items which fulfill this condition will be affected by the specified action. <code>slot</code> Identifier optional If specified, only items in the designated slot will be modified. See Positioned Item Stack Slots for possible values. <code>slots</code> Array of Identifiers optional If specified, only items in the designated slots will be modified. See Positioned Item Stack Slots for possible values. <code>power</code> Identifier optional If specified and if <code>inventory_type</code> is set to <code>\"power\"</code>, the items in the inventory of this power will be modified instead of the items in the entity's inventory.","boost":2},{"location":"types/entity_action_types/modify_inventory/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:modify_inventory\",\n\"item_action\": {\n\"type\": \"apoli:consume\",\n\"amount\": 1\n}\n}\n</code></pre> <p>This example will \"consume\" all items from the entity's inventory.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:modify_inventory\",\n\"item_action\": {\n\"type\": \"apoli:damage\",\n\"amount\": 5\n},\n\"item_condition\": {\n\"type\": \"apoli:armor_value\",\n\"comparison\": \"&gt;\",\n\"compare_to\": 0\n},\n\"slots\": [\n\"armor.head\",\n\"armor.chest\",\n\"armor.legs\",\n\"armor.feet\"\n]\n}\n</code></pre> <p>This example will damage armor items from the entity's equipment armor slots.</p>","boost":2},{"location":"types/entity_action_types/modify_key_sequence/","title":"Modify Key Sequence","text":"<p>Entity Action Type</p> <p>Modifies the current key sequence of a power that uses the Action on Key Sequence (Power Type) present on the entity that invoked the action.</p> <p>Type ID: <code>eggolib:modify_key_sequence</code></p> <p>Note</p> <p>If <code>index</code> is less than or equal to <code>-1</code>, then it would refer to the last index of the current key sequence. Otherwise, if it's <code>0</code>, then it would refer to the first index of the current key sequence.</p> <p>Note</p> <p>Here's an explanation on how each operation works:</p> <ul> <li><code>\"append\"</code>  - Adds the specified keys to the last index of the current key sequence.</li> <li><code>\"insert\"</code>  - Inserts the specified keys to the specified index of the current key sequence.</li> <li><code>\"prepend\"</code> - Adds the specified keys to the first index of the current key sequence.</li> <li><code>\"remove\"</code>  - Removes the specified keys from the current key sequence. If there are no keys specified, remove the key from the specified index instead.</li> <li><code>\"set\"</code>     - Replace the current key sequence with the specified key sequence.</li> </ul>","boost":2},{"location":"types/entity_action_types/modify_key_sequence/#fields","title":"Fields","text":"Field Type Default Description <code>power</code> Identifier The namespace and ID of the power to modify its current key sequence of. <code>operation</code> String <code>\"append\"</code> Determines how the specified keys are operated on the current key sequence of the specified power. Accepts <code>\"append\"</code>, <code>\"insert\"</code>, <code>\"prepend\"</code>, <code>\"remove\"</code> or <code>\"set\"</code>. <code>keys</code> Array of Keys optional If specified, these keys will be used to modify the current key sequence of the specified power. <code>index</code> Integer <code>-1</code> The integer to use as the index when modifying the current key sequence of the specified power. Only used by the <code>\"insert\"</code> and <code>\"remove\"</code> operations.","boost":2},{"location":"types/entity_action_types/modify_key_sequence/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:modify_key_sequence\",\n\"power\": \"example:power\",\n\"operation\": \"set\",\n\"keys\": []\n}\n</code></pre> <p>This example will essentially clear the current key sequence of the <code>example:power</code> power.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:modify_key_sequence\",\n\"power\": \"example:power\",\n\"operation\": \"remove\"\n}\n</code></pre> <p>This example will remove the key from the last index of the current key sequence of the <code>example:power</code> power.</p>","boost":2},{"location":"types/entity_action_types/open_inventory/","title":"Open Inventory","text":"<p>Entity Action Type</p> <p>Opens an inventory.</p> <p>Type ID: <code>eggolib:open_inventory</code></p> <p>Caution</p> <p>Currently, this entity action type cannot open the inventory of the player that invoked the action.</p>","boost":2},{"location":"types/entity_action_types/open_inventory/#fields","title":"Fields","text":"Field Type Default Description <code>power</code> Identifier optional If specified, the inventory of this power will be opened instead.","boost":2},{"location":"types/entity_action_types/open_inventory/#examples","title":"Examples","text":"<pre><code>\"entity_action\": {\n\"type\": \"eggolib:open_inventory\",\n\"power\": \"example:extra_inventory\"\n}\n</code></pre> <p>This example will open the inventory of the <code>example:extra_inventory</code> (<code>data/example/powers/extra_inventory.json</code>) as long as that power uses the <code>inventory</code> power type.</p>","boost":2},{"location":"types/entity_action_types/play_sound/","title":"Play Sound","text":"<p>Entity Action Type</p> <p>Plays a sound event at the position of the entity.</p> <p>Type ID: <code>eggolib:play_sound</code></p> <p>Note</p> <p>The value of the <code>volume</code> field is used to multiply the base distance of the sound event, which is 16 blocks.</p>","boost":2},{"location":"types/entity_action_types/play_sound/#fields","title":"Fields","text":"Field Type Default Description <code>sound</code> Identifier The identifier of the sound event to play. <code>category</code> Sound Category optional If specified, use this sound category instead of the sound category defined in the entity. <code>volume</code> Float <code>1.0</code> The volume of the sound event. <code>pitch</code> Float <code>1.0</code> The pitch of the sound event.","boost":2},{"location":"types/entity_action_types/play_sound/#examples","title":"Examples","text":"Example #1 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:play_sound\",\n\"sound\": \"minecraft:entity.creeper.ignite\",\n\"category\": \"hostile\"\n}\n</code></pre> <p>This example will play the <code>minecraft:entity.creeper.ignite</code> sound event in the <code>hostile</code> sound category.</p>","boost":2},{"location":"types/entity_action_types/remove_power/","title":"Remove Power","text":"<p>Entity Action Type</p> <p>Removes a power from the entity.</p> <p>Type ID: <code>eggolib:remove_power</code></p>","boost":2},{"location":"types/entity_action_types/remove_power/#fields","title":"Fields","text":"Field Type Default Description <code>power</code> Identifier The namespace, path and ID of the power to be removed.","boost":2},{"location":"types/entity_action_types/remove_power/#examples","title":"Examples","text":"<pre><code>\"entity_action\": {\n\"type\": \"eggolib:remove_power\",\n\"power\": \"example:phasing\"\n}\n</code></pre> <p>This example will remove the <code>example:phasing</code> (<code>data/example/powers/phasing.json</code>) power from the entity that invoked the action.</p>","boost":2},{"location":"types/entity_action_types/replace_inventory/","title":"Replace Inventory","text":"<p>Entity Action Type</p> <p>Replaces the item(s) from either the entity's inventory or a power that uses the Inventory (Power Type) or Origins/Apoli's Inventory (Power Type).</p> <p>Type ID: <code>eggolib:replace_inventory</code></p>","boost":2},{"location":"types/entity_action_types/replace_inventory/#fields","title":"Fields","text":"Field Type Default Description <code>inventory_type</code> Inventory Type <code>\"inventory\"</code> Determines whether to replace the items from the inventory of the entity or the inventory of a power present in the entity. <code>entity_action</code> Entity Action optional If specified, this action will be executed on the entity before the items are replaced. <code>item_action</code> Item Action optional If specified, this action will be executed on the affected items after the said items are replaced. <code>item_condition</code> Item Condition optional If specified, only items which fulfill this condition will be replaced. <code>slot</code> Identifier optional If specified, only items in the designated slot will be replaced. See Positioned Item Stack Slots for possible values. <code>slots</code> Array of Identifiers optional If specified, only items in the designated slots will be replaced. See Positioned Item Stack Slots for possible values. <code>power</code> Identifer optional If specified and if <code>inventory_type</code> is set to <code>\"power\"</code>, the items in the inventory of this power will be replaced instead of the items in the entity's inventory. <code>stack</code> Item Stack The item to use as a replacement for the affected items. <code>merge_nbt</code> Boolean <code>false</code> Determines whether to merge the NBTs of the item that will be replaced and the NBTs of the item that will be used as a replacement.","boost":2},{"location":"types/entity_action_types/replace_inventory/#examples","title":"Examples","text":"Example #1Example #2Example #3 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:replace_inventory\",\n\"stack\": {\n\"item\": \"minecraft:egg\"\n}\n}\n</code></pre> <p>This example will fill the entire inventory of the entity with Eggs.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:replace_inventory\",\n\"slots\": [\n\"weapon.mainhand\",\n\"weapon.offhand\"\n],\n\"stack\": {\n\"item\": \"minecraft:air\"\n}\n}\n</code></pre> <p>This example will remove the items from the entity's off and main hands.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:replace_inventory\",\n\"slot\": \"weapon.mainhand\",\n\"stack\": {\n\"item\": \"minecraft:wooden_sword\",\n\"tag\": \"{Enchantments: [{id: \\\"minecraft:mending\\\", lvl: 1s}]}\"\n},\n\"merge_nbt\": true\n}\n</code></pre> <p>This example will replace the item from the entity's mainhand slot with a Wooden Sword enchanted with the Mending enchantment. If the previous item from the entity's mainhand slot had NBTs, those NBTs will be merged to the NBTs of the item used as a replacement.</p>","boost":2},{"location":"types/entity_action_types/set_perspective/","title":"Set Perspective","text":"<p>Entity Action Type</p> <p>Sets the perspective of the player.</p> <p>Type ID: <code>eggolib:set_perspective</code></p>","boost":2},{"location":"types/entity_action_types/set_perspective/#fields","title":"Fields","text":"Field Type Default Description <code>perspective</code> Perspective The perspective to use.","boost":2},{"location":"types/entity_action_types/set_perspective/#examples","title":"Examples","text":"<pre><code>\"entity_action\": {\n\"type\": \"eggolib:set_perspective\",\n\"perspective\": \"first_person\"\n}\n</code></pre> <p>This example will set the perspective of the player to first person.</p>","boost":2},{"location":"types/entity_action_types/spawn_entity/","title":"Spawn Entity","text":"<p>Entity Action Type</p> <p>Spawns an entity.</p> <p>Type ID: <code>eggolib:spawn_entity</code></p> <p>Note</p> <p>This action type can spawn in entities with passengers.</p>","boost":2},{"location":"types/entity_action_types/spawn_entity/#field","title":"Field","text":"Field Type Default Description <code>entity_type</code> Identifier The identifier of the entity that will be spawned. <code>tag</code> String optional If specified, this NBT data will be added to the entity that will be spawned. <code>entity_action</code> Entity Action Type optional If specified, this action will be executed on the entity that will be spawned.","boost":2},{"location":"types/entity_action_types/spawn_entity/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:spawn_entity\",\n\"entity_type\": \"minecraft:skeleton\",\n\"tag\": \"{ArmorItems: [{}, {}, {}, {id: \\\"minecraft:iron_helmet\\\", Count: 1b}]}\"\n}\n</code></pre> <p>This example will spawn a Skeleton with an Iron Helmet.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:spawn_entity\",\n\"entity_type\": \"minecraft:skeleton_horse\",\n\"tag\": \"{Passengers: [{id: \\\"minecraft:skeleton\\\", ArmorItems: [{}, {}, {}, {id: \\\"minecraft:golden_helmet\\\", Count: 1b}]}]}\"\n}\n</code></pre> <p>This example will spawn a Skeleton Horse with a Skeleton passenger equipped with a Golden Helmet.</p>","boost":2},{"location":"types/entity_condition_types/block_collision/","title":"Block Collision","text":"<p>Entity Condition Type</p> <p>Checks whether the bounding box of the entity is colliding with a block.</p> <p>Type ID: <code>eggolib:block_collision</code></p>"},{"location":"types/entity_condition_types/block_collision/#fields","title":"Fields","text":"Field Type Default Description <code>block_condition</code> Block Condition optional If specified, the condition will only evaluate to true if this condition is fulfilled by the block colliding with the bounding box of the entity. <code>offset_x</code> Float <code>0</code> Determines the offset for the bounding box of the entity in the X axis. <code>offset_y</code> Float <code>0</code> Determines the offset for the bounding box of the entity in the Y axis. <code>offset_z</code> Float <code>0</code> Determines the offset for the bounding box of the entity in the Z axis."},{"location":"types/entity_condition_types/block_collision/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:block_collision\",\n\"offset_x\": 0.1,\n\"offset_z\": 0.1\n}\n</code></pre> <p>This example will check if the bounding box of the entity is colliding with the east and south faces of a block.</p> <pre><code>\"condition\": {\n\"type\": \"apoli:or\",\n\"conditions\": [\n{\n\"type\": \"eggolib:block_collision\",\n\"block_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:white_wool\"\n},\n\"offset_x\": 0.01,\n\"offset_z\": 0.01\n},\n{\n\"type\": \"eggolib:block_collision\",\n\"block_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:white_wool\"\n},\n\"offset_x\": -0.01,\n\"offset_z\": -0.01\n}\n]\n}\n</code></pre> <p>This example will check if the bounding box of the entity is colliding with the north, south, east or west faces of a White Wool block.</p>"},{"location":"types/entity_condition_types/breaking_block/","title":"Breaking Block","text":"<p>Entity Condition Type</p> <p>Checks if the player is currently breaking a block.</p> <p>Type ID: <code>eggolib:breaking_block</code></p>","boost":2},{"location":"types/entity_condition_types/breaking_block/#fields","title":"Fields","text":"Field Type Default Description <code>block_condition</code> Block Condition Type optional If specified, the condition will only evaluate to true if this condition is fulfilled by the block being broken. <code>using_effective_tool</code> Boolean <code>false</code> Determines if the condition should check if the player is using the effective tool for the block being broken.","boost":2},{"location":"types/entity_condition_types/breaking_block/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:breaking_block\",\n\"block_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:diamond_block\"\n}\n}\n</code></pre> <p>This example will check if the player is currently mining a Diamond Block.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:breaking_block\",\n\"using_effective_tool\": true\n}\n</code></pre> <p>This example will check if the player is currently mining a block using its effective tool.</p>","boost":2},{"location":"types/entity_condition_types/has_tag/","title":"Has Tag","text":"<p>Entity Condition Type</p> <p>Checks if the entity has a scoreboard tag (added via the <code>/tag</code> command).</p> <p>Type ID: <code>eggolib:has_tag</code></p> <p>Note</p> <p>If neither the <code>tag</code> or <code>tags</code> fields are specified, this entity condition type will check if the entity has any scoreboard tags.</p>","boost":2},{"location":"types/entity_condition_types/has_tag/#fields","title":"Fields","text":"Field Type Default Description <code>tag</code> String optional If specified, checks if the entity has this scoreboard tag. <code>tags</code> Array of Strings optional If specified, checks if the entity has these scoreboard tags.","boost":2},{"location":"types/entity_condition_types/has_tag/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:has_tag\",\n\"tag\": \"example.tag\"\n}\n</code></pre> <p>This example will check if the entity has the <code>example.tag</code> scoreboard tag.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:has_tag\",\n\"tags\": [\n\"tag_with_numbers123\",\n\"tagWithUppercasedLetters\"\n]\n}\n</code></pre> <p>This example will check if the entity has the <code>tag_with_numbers123</code> or the <code>tagWithUppercasedLetters</code> scoreboard tags.</p>","boost":2},{"location":"types/entity_condition_types/in_block/","title":"In Block","text":"<p>Entity Condition Type</p> <p>Checks if the entity's feet or eyes is in a block.</p> <p>Type ID: <code>eggolib:in_block</code></p>","boost":2},{"location":"types/entity_condition_types/in_block/#fields","title":"Fields","text":"Field Type Default Description <code>block_condition</code> Block Condition Type The condition to test on the block at the entity's specified offset. <code>offset</code> Entity Offset <code>\"feet\"</code> Determines the offset of where the condition should check for the block.","boost":2},{"location":"types/entity_condition_types/in_block/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:in_block\",\n\"block_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:water\"\n}\n}\n</code></pre> <p>This example will check if the entity's feet is in water.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:in_block\",\n\"block_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:lava\"\n},\n\"offset\": \"eyes\"\n}\n</code></pre> <p>This example will check if the entity's eyes is in lava.</p>","boost":2},{"location":"types/entity_condition_types/in_screen/","title":"In Screen","text":"<p>Entity Condition Type</p> <p>Checks if the player has any or specific screen open.</p> <p>Type ID: <code>eggolib:in_screen</code></p>","boost":2},{"location":"types/entity_condition_types/in_screen/#fields","title":"Fields","text":"Field Type Default Description <code>screen</code> String optional If specified, the condition will evaluate to true if the player's current screen matches this screen. See In-Game Screen Class (Class Data Registry) for possible values. <code>screens</code> Array of Strings optional If specified, the condition will evaluate to true if the player's current screen matches any of these screens. See In-Game Screen Class (Class Data Registry) for possible values.","boost":2},{"location":"types/entity_condition_types/in_screen/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:in_screen\"\n}\n</code></pre> <p>This example will check if the player has a screen open.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:in_screen\",\n\"screens\": [\n\"inventory\",\n\"creative_inventory\"\n]\n}\n</code></pre> <p>This example will check if the player has the inventory or creative inventory screen open.</p>","boost":2},{"location":"types/entity_condition_types/in_team/","title":"In Team","text":"<p>Entity Condition Type</p> <p>Checks if the entity is in the specified team(s).</p> <p>Type ID: <code>eggolib:in_team</code></p> <p>Note</p> <p>If neither the <code>team</code> or <code>teams</code> field is present, this entity condition type will check if the entity is in any team.</p>","boost":2},{"location":"types/entity_condition_types/in_team/#fields","title":"Fields","text":"Field Type Default Description <code>team</code> Abstract Team optional If specified, check if the entity is in this team. <code>teams</code> Array of Abstract Teams optional If specified, check if the entity is in any of these teams.","boost":2},{"location":"types/entity_condition_types/in_team/#examples","title":"Examples","text":"Example #1Example #2Example #3 <pre><code>\"condition\": {\n\"type\": \"eggolib:in_team\"\n}\n</code></pre> <p>This example will check if the entity is in any team.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:in_team\",\n\"team\": {\n\"name\": \"epicGamers\"\n}\n}\n</code></pre> <p>This example will check if the entity is in a team with the name \"epicGamers\".</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:in_team\",\n\"teams\": [\n{\n\"name\": \"epicGamers\"\n},\n{\n\"nametag_visibility\": \"never\"\n}\n]\n}\n</code></pre> <p>This example will check if the entity is in a team with the name \"epicGamers\" or a team that has the <code>nametagVisibility</code> option set to <code>never</code>.</p>","boost":2},{"location":"types/entity_condition_types/inventory/","title":"Inventory","text":"<p>Entity Condition Type</p> <p>Checks if the inventory of the entity is occupied.</p> <p>Type ID: <code>eggolib:inventory</code></p>","boost":2},{"location":"types/entity_condition_types/inventory/#fields","title":"Fields","text":"Field Type Default Description <code>inventory_type</code> Inventory Type <code>\"inventory\"</code> Determines whether to check for items in the inventory of the entity or the inventory of a power present in the entity. <code>item_condition</code> Item Condition optional If specified, only evaluate the condition to true if any of the items in the specified inventory fulfills this condition. <code>slot</code> Identifier optional If specified, only items in the specified slot will be checked. See Positioned Item Stack Slots for possible values. <code>slots</code> Array of Identifiers optional If specified, only items in the specified slots will be checked. See Positioned Item Stack Slots for possible values. <code>power</code> Identifier optional If specified and if <code>inventory_type</code> is set to <code>\"power\"</code>, the items in the inventory of this power will be checked instead of the items in the entity's inventory.","boost":2},{"location":"types/entity_condition_types/inventory/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:inventory\",\n\"item_condition\": {\n\"type\": \"apoli:ingredient\",\n\"ingredient\": {\n\"item\": \"minecraft:egg\"\n}\n}\n}\n</code></pre> <p>This example will check if the entity has an Egg item in their inventory.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:inventory\",\n\"inventory_type\": \"power\",\n\"item_condition\": {\n\"type\": \"apoli:ingredient\",\n\"ingredient\": {\n\"item\": \"minecraft:nether_star\"\n}\n},\n\"slot\": \"container.4\",\n\"power\": \"origins:shulker_inventory\"\n}\n</code></pre> <p>This example will check if the entity has a Nether Star in the middle slot of the inventory of the <code>origins:shulker_inventory</code> power.</p>","boost":2},{"location":"types/entity_condition_types/permission_level/","title":"Permission Level","text":"<p>Entity Condition Type</p> <p>Checks if the entity has the specified permission level.</p> <p>Type ID: <code>eggolib:permission_level</code></p> <p>Caution</p> <p>This may not work properly in singleplayer.</p>","boost":2},{"location":"types/entity_condition_types/permission_level/#fields","title":"Fields","text":"Field Type Default Description <code>comparison</code> Comparison <code>\"&gt;=\"</code> Determines how the permission level of the entity should be compared to the specified value. <code>compare_to</code> Integer <code>2</code> The value which the permission level of the entity should be compared to.","boost":2},{"location":"types/entity_condition_types/permission_level/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:permission_level\",\n\"comparison\": \"&gt;=\",\n\"compare_to\": 1\n}\n</code></pre> <p>This example will check if the entity is opped in general.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:permission_level\",\n\"comparison\": \"==\",\n\"compare_to\": 4\n}\n</code></pre> <p>This example will check if the entity has a permission level of 4, which is the highest permission level.</p>","boost":2},{"location":"types/entity_condition_types/perspective/","title":"Perspective","text":"<p>Entity Condition Type</p> <p>Checks the current perspective of the player.</p> <p>Type ID: <code>eggolib:perspective</code></p>","boost":2},{"location":"types/entity_condition_types/perspective/#fields","title":"Fields","text":"Field Type Default Description <code>perspective</code> Perspective optional If specified, the condition will evaluate to true if the player has this set as their perspective. <code>perspectives</code> Array of Perspectives optional If specified, the condition will evaluate to true if the player has one of these set as their perspective.","boost":2},{"location":"types/entity_condition_types/perspective/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:perspective\",\n\"perspective\": \"first_person\"\n}\n</code></pre> <p>This example will check if the player is in first person perspective.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:perspective\",\n\"perspectives\": [\n\"third_person_back\",\n\"third_person_front\"\n]\n}\n</code></pre> <p>This example will check if the player is in either third person (back) or third person (front) perspectives.</p>","boost":2},{"location":"types/entity_condition_types/scoreboard/","title":"Scoreboard","text":"<p>Entity Condition Type</p> <p>Compares the score of the entity (or score holder) from a specified scoreboard objective to the specified value.</p> <p>Note</p> <p>If the entity or score holder does not have a score from the specified scoreboard objective, this condition would return false even if the <code>\"!=\"</code> comparison is used. You can use the <code>\"!=\"</code> comparison in combination with the <code>\"==\"</code> comparison to test if the entity or score holder does not have a score in the specified scoreboard objective.</p> <p>Caution</p> <p>This condition is only effective server-side, meaning that using the condition in client-sided power types will not work properly.</p>","boost":2},{"location":"types/entity_condition_types/scoreboard/#fields","title":"Fields","text":"Field Type Default Description <code>name</code> String optional If specified, the condition will check for the score of this score holder instead of the entity. <code>objective</code> String The name of the scoreobard objective to retrieve the score of the entity or score holder from. <code>comparison</code> Comparison Determines how the score of the entity or score holder should be compared to the specified value. <code>compare_to</code> Integer The value which the score of the entity or score holder should be compared to.","boost":2},{"location":"types/entity_condition_types/scoreboard/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"condition\": {\n\"type\": \"eggolib:scoreboard\",\n\"objective\": \"example\",\n\"comparison\": \"&gt;=\",\n\"compare_to\": 1\n}\n</code></pre> <p>This example will check if the entity has a score of 1 or greater in the <code>example</code> scoreboard objective.</p> <pre><code>\"condition\": {\n\"type\": \"eggolib:scoreboard\",\n\"name\": \"testScoreHolder\",\n\"objective\": \"example\",\n\"comparison\": \"==\",\n\"compare_to\": 10\n}\n</code></pre> <p>This example will check if the <code>testScoreHolder</code> score holder from the <code>example</code> scoreboard objective has a score of 10.</p>","boost":2},{"location":"types/item_condition_types/block_item/","title":"Block Item","text":"<p>Item Condition Type</p> <p>Checks whether the item is a block item (e.g: an item that can place blocks).</p> <p>Type ID: <code>eggolib:block_item</code></p>","boost":2},{"location":"types/item_condition_types/block_item/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/item_condition_types/block_item/#examples","title":"Examples","text":"<pre><code>\"item_condition\": {\n\"type\": \"eggolib:block_item\"\n}\n</code></pre>","boost":2},{"location":"types/item_condition_types/enchantment/","title":"Enchantment","text":"<p>Item Condition Type</p> <p>Checks whether the item is enchanted.</p> <p>Type ID: <code>eggolib:enchantment</code></p>","boost":2},{"location":"types/item_condition_types/enchantment/#fields","title":"Fields","text":"Field Type Default Description <code>enchantment</code> Identifier optional If specified, the condition will check if the item has this specific enchantment. <code>comparison</code> Comparison <code>\"&gt;=\"</code> Determines how the level of the specified enchantment is compared to the specified value. If <code>enchantment</code> is not present, this will determine how the count of available enchantments in the item is compared to the specified value instead. <code>compare_to</code> Integer <code>1</code> The specified value to compare the level of the specified enchantment to. If <code>enchantment</code> is not present, this will be compared to the count of available enchantments in the item instead.","boost":2},{"location":"types/item_condition_types/enchantment/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"item_condition\": {\n\"type\": \"eggolib:enchantment\",\n\"comparison\": \"&gt;=\",\n\"compare_to\": 1\n}\n</code></pre> <p>This example will check if the item has one or more enchantments.</p> <pre><code>\"item_condition\": {\n\"type\": \"eggolib:enchantment\",\n\"enchantment\": \"minecraft:mending\",\n\"comparison\": \"==\",\n\"compare_to\": 1\n}\n</code></pre> <p>This example will check if the item has the Mending I enchantment.</p>","boost":2},{"location":"types/item_condition_types/tool/","title":"Tool","text":"<p>Item Condition Type</p> <p>Checks whether the item is a tool or if it's an instance of a certain tool type.</p> <p>Type ID: <code>eggolib:tool</code></p>","boost":2},{"location":"types/item_condition_types/tool/#fields","title":"Fields","text":"Field Type Default Description <code>tool_type</code> String optional If specified, the condition will evaluate to true if the item is an instance of this tool type. Accepts one of <code>\"axe\"</code>, <code>\"hoe\"</code>, <code>\"pickaxe\"</code>, <code>\"shovel\"</code>, <code>\"sword\"</code> and <code>\"shears\"</code>. <code>tool_types</code> Array of Strings optional If specified, the condition will evaluate to true if the item is an instance of one of these tool types. Accepts <code>\"axe\"</code>, <code>\"hoe\"</code>, <code>\"pickaxe\"</code>, <code>\"shovel\"</code>, <code>\"sword\"</code> and <code>\"shears\"</code>.","boost":2},{"location":"types/item_condition_types/tool/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"item_condition\": {\n\"type\": \"eggolib:tool\",\n\"tool_type\": \"sword\"\n}\n</code></pre> <p>This example will check if the item is a Sword.</p> <pre><code>\"item_condition\": {\n\"type\": \"eggolib:tool\",\n\"tool_types\": [\n\"axe\",\n\"pickaxe\"\n]\n}\n</code></pre> <p>This example will check if the item is either an Axe or a Pickaxe.</p>","boost":2},{"location":"types/meta_action_types/loop/","title":"Loop","text":"<p>Meta Action Type</p> <p>Executes an action for the specified amount of iterations.</p> <p>Type ID: <code>eggolib:loop</code></p>","boost":2},{"location":"types/meta_action_types/loop/#fields","title":"Fields","text":"Field Type Default Description <code>before_action</code> Action Type optional If specified, this action will be executed before the loop starts. <code>action</code> Action Type optional If specified, this action will be executed for each iteration of the loop. <code>after_action</code> Action Type optional If specified, this action will be executed after the loop ends. <code>score</code> Scoreboard optional If specified, this value will be used as the amount of iterations for the loop. <code>value</code> Integer optional If specified and if <code>score</code> is not specified, this value will be used as the amount of iterations for the loop.","boost":2},{"location":"types/meta_action_types/loop/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>\"entity_action\": {\n\"type\": \"eggolib:loop\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"say Hello!\"\n},\n\"value\": 3\n}\n</code></pre> <p>This example will make the entity that invoked the action say \"Hello!\" thrice.</p> <pre><code>\"entity_action\": {\n\"type\": \"eggolib:loop\",\n\"action\": {\n\"type\": \"apoli:heal\",\n\"amount\": 2\n},\n\"score\": {\n\"name\": \"amountOfHeals\",\n\"objective\": \"example\"\n}\n}\n</code></pre> <p>This example will heal the entity that invoked the action depending on the score of the <code>amountOfHeals</code> score holder in the <code>example</code> scoreboard objective. If it doesn't exist, the action will simply do nothing.</p>","boost":2},{"location":"types/meta_condition_types/chance/","title":"Chance","text":"<p>Meta Condition Type</p> <p>Generates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.</p> <p>Type ID: <code>eggolib:chance</code></p>","boost":2},{"location":"types/meta_condition_types/chance/#fields","title":"Fields","text":"Field Type Default Description <code>chance</code> Float The value to compare the generated random value to.","boost":2},{"location":"types/meta_condition_types/chance/#examples","title":"Examples","text":"Example #1 <pre><code>\"condition\": {\n\"type\": \"eggolib:chance\",\n\"chance\": 0.5\n}\n</code></pre> <p>This example will evaluate to true 50% of the time.</p>","boost":2},{"location":"types/power_types/action_on_block_place/","title":"Action on Block Place","text":"<p>Power Type</p> <p>Executes an action upon placing a block.</p> <p>Type ID: <code>eggolib:action_on_block_place</code></p>","boost":2},{"location":"types/power_types/action_on_block_place/#fields","title":"Fields","text":"Field Type Default Description <code>entity_action</code> Entity Action Type optional If specified, this action will be executed on the player upon placing a block. <code>held_item_action</code> Item Action Type optional If specified, this action will be executed on the item the player has used to place a block. <code>result_item_action</code> Item Action Type optional If specified, this action will be executed on the item that will be given to the player upon placing a block. <code>place_to_action</code> Block Action Type optional If specified, this action will be executed at the position of the block the player has placed. <code>place_on_action</code> Block Action Type optional If specified, this action will be executed on the block the player placed a block on. <code>item_condition</code> Item Condition Type optional If specified, only execute the specified actions if the item the player has used to place a block fulfills this condition. <code>place_to_condition</code> Block Condition Type optional If specified, only execute the specified actions if the old block at the position of the new block the player has placed fulfills this condition. <code>place_on_condition</code> Block Condition Type optional If specified, only execute the specified actions if the block the player placed a block on fulfills this condition. <code>directions</code> Array of Strings <code>[\"up\", \"down\", \"north\", \"south\", \"east\", \"west\"]</code> Determines if the specified actions should be executed if the player has placed a block at the specified side(s) of a block. <code>hands</code> Array of Strings <code>[\"main_hand\", \"off_hand\"]</code> Determines if the specified actions should be executed if the player has attempted to place a block using the specified hand(s). <code>result_stack</code> Item Stack optional If specified, this item will be given to the player upon placing a block.","boost":2},{"location":"types/power_types/action_on_block_place/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:action_on_block_place\",\n\"entity_action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"me placed a Dragon Egg!\"\n},\n\"item_condition\": {\n\"type\": \"apoli:ingredient\",\n\"ingredient\": {\n\"item\": \"minecraft:dragon_egg\"\n}\n}\n}\n</code></pre> <p>This example will announce to all players that the player that has the power has placed a Dragon Egg if the player in question did place a Dragon Egg.</p> <pre><code>{\n\"type\": \"eggolib:action_on_block_place\",\n\"entity_action\": {\n\"type\": \"apoli:heal\",\n\"amount\": 2\n},\n\"place_to_action\": {\n\"type\": \"apoli:set_block\",\n\"block\": \"minecraft:air\"\n},\n\"item_condition\": {\n\"type\": \"apoli:ingredient\",\n\"ingredient\": {\n\"tag\": \"minecraft:wool\"\n}\n},\n\"place_on_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:diamond_block\"\n},\n\"directions\": [\n\"up\"\n]\n}\n</code></pre> <p>This example will heal the player that has the power if the player in question places a Wool block on top of a Diamond Block.</p>","boost":2},{"location":"types/power_types/action_on_item_pickup/","title":"Action on Item Pickup","text":"<p>Power Type</p> <p>Executes an action upon picking up an item.</p> <p>Type ID: <code>eggolib:action_on_item_pickup</code></p> <p>Note</p> <p>In the context of this power type, the 'actor' entity is the entity that may have thrown the item while the 'target' entity is the entity that picked up the item.</p>","boost":2},{"location":"types/power_types/action_on_item_pickup/#fields","title":"Fields","text":"Field Type Default Description <code>bientity_action</code> Bi-entity Action Type optional If specified, this action will be executed on either or both the 'actor' and 'target' entities. <code>item_action</code> Item Action Type optional If specified, this action will be executed on the item that was picked up. <code>bientity_condition</code> Bi-entity Condition Type optional If specified, the actions will only be executed if this condition is fulfilled by either or both the 'actor' and 'target' entities. <code>item_condition</code> Item Condition Type optional If specified, the actions will only be executed if this condition is fulfilled by the item about to be picked up.","boost":2},{"location":"types/power_types/action_on_item_pickup/#examples","title":"Examples","text":"Example #1Example #2Example #3 <pre><code>{\n\"type\": \"eggolib:action_on_item_pickup\",\n\"bientity_action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"me has picked up an item!\"\n}\n}\n</code></pre> <p>This example will notify all players that the entity that has the power has picked up an item.</p> <pre><code>{\n\"type\": \"eggolib:action_on_item_pickup\",\n\"item_action\": {\n\"type\": \"apoli:merge_nbt\",\n\"nbt\": \"{Enchantments: [{id: \\\"minecraft:vanishing_curse\\\", lvl: 1s}]}\"\n},\n\"item_condition\": {\n\"type\": \"eggolib:tool\",\n\"tool_types\": [\n\"pickaxe\",\n\"axe\",\n\"shovel\",\n\"hoe\"\n]\n}\n}\n</code></pre> <p>This example will enchant the pickaxe, axe, shovel and hoe tool items with Curse of Vanishing I upon being picked up by the entity that has the power.</p> <pre><code>{\n\"type\": \"eggolib:action_on_item_pickup\",\n\"bientity_action\": {\n\"type\": \"apoli:target_action\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"me has picked up someone else's item!\"\n}\n},\n\"bientity_condition\": {\n\"type\": \"apoli:actor_condition\",\n\"condition\": {\n\"type\": \"apoli:exists\"\n}\n}\n}\n</code></pre> <p>This example will notify all players that the entity that has the power has picked up an item thrown by another entity.</p>","boost":2},{"location":"types/power_types/action_on_key_sequence/","title":"Action on Key Sequence","text":"<p>Power Type</p> <p>Executes an action upon pressing certain keybinds in a certain sequence.</p> <p>Type ID: <code>eggolib:action_on_key_sequence</code></p>","boost":2},{"location":"types/power_types/action_on_key_sequence/#fields","title":"Fields","text":"Field Type Default Description <code>success_action</code> Entity Action Type optional If specified, this action will be executed if the player succeeded to press the specified keybinds in the specified sequence. <code>fail_action</code> Entity Action Type optional If specified, this action will be executed if the player failed to press the specified keybinds in the specified sequence. <code>cooldown</code> Integer <code>0</code> Interval of ticks this power needs to recharge before the power can be triggered again. <code>hud_render</code> HUD Render <code>{\"should_render\": false}</code> Determines how the cooldown for this power is visualized on the HUD. <code>keys</code> Array of Functional Keys Determines the keys to be used for completing the sequence. <code>key_sequence</code> Array of Keys Determines the sequence to be completed by the player.","boost":2},{"location":"types/power_types/action_on_key_sequence/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:action_on_key_sequence\",\n\"success_action\": {\n\"type\": \"apoli:heal\",\n\"amount\": 4\n},\n\"cooldown\": 100,\n\"hud_render\": {\n\"should_render\": true\n},\n\"keys\": [\n{\n\"key\": \"key.jump\",\n\"continuous\": false,\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"me jumped!\"\n}\n},\n\"key.attack\",\n\"key.use\"\n],\n\"key_sequence\": [\n\"key.attack\",\n\"key.attack\",\n\"key.jump\"\n]\n}\n</code></pre> <p>This example will heal the player with 4 health points (or 2 hearts) upon the player pressing the <code>key.attack</code> and <code>key.jump</code> keybinds in a <code>key.attack</code> -&gt; <code>key.attack</code> -&gt; <code>key.jump</code> sequence.</p> <pre><code>{\n\"type\": \"eggolib:action_on_key_sequence\",\n\"success_action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"me casted 'KONAMI CODE'!\"\n},\n\"fail_action\": {\n\"type\": \"apoli:damage\",\n\"source\": {\n\"name\": \"generic\"\n},\n\"amount\": 10\n},\n\"cooldown\": 200,\n\"hud_render\": {\n\"should_render\": true\n},\n\"keys\": [\n{\n\"key\": \"key.jump\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"say UP\"\n}\n},\n{\n\"key\": \"key.sneak\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"say DOWN\"\n}\n},\n{\n\"key\": \"key.left\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"say LEFT\"\n}\n},\n{\n\"key\": \"key.right\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"say RIGHT\"\n}\n},\n{\n\"key\": \"key.attack\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"say A (Attack)\"\n}\n},\n{\n\"key\": \"key.use\",\n\"action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"say B (Use)\"\n}\n}\n],\n\"key_sequence\": [\n\"key.jump\",\n\"key.jump\",\n\"key.sneak\",\n\"key.sneak\",\n\"key.left\",\n\"key.right\",\n\"key.left\",\n\"key.right\",\n\"key.use\",\n\"key.attack\"\n]\n}\n</code></pre> <p>This example will notify all players that the player that has the power has \"casted 'KONAMI CODE'!\" if the player in question has pressed the <code>key.jump</code>, <code>key.sneak</code>, <code>key.left</code>, <code>key.right</code>, <code>key.attack</code> and <code>key.use</code> keybinds in the classic KONAMI CODE sequence. (UP (<code>key.jump</code>) -&gt; UP (<code>key.jump</code>) -&gt; DOWN (<code>key.sneak</code>) -&gt; DOWN (<code>key.sneak</code>) -&gt; LEFT (<code>key.left</code>) -&gt; RIGHT (<code>key.right</code>) -&gt; LEFT (<code>key.left</code>) -&gt; RIGHT (<code>key.right</code>) -&gt; B (<code>key.use</code>) -&gt; A (<code>key.attack</code>))</p>","boost":2},{"location":"types/power_types/game_event_listener/","title":"Game Event Listener","text":"<p>Power Type</p> <p>Executes an action upon listening to certain game events or vibrations.</p> <p>Type ID: <code>eggolib:game_event_listener</code></p> <p>Note</p> <p>See Minecraft Fandom: Sculk Sensor (Vibration amplitudes) for a list of vanilla game events you can use.</p> <p>Note</p> <p>In the context of this power, the 'actor' will be the entity that emitted the game event whilst the 'target' will be the entity that has the power.</p> <p>Warning</p> <p>Currently, this power type does not allow for both the <code>bientity_condition</code> and <code>block_condition</code> fields to be present. One will have to choose one of the fields:</p> <ul> <li><code>bientity_condition</code> - the power will only listen to game events emitted by entities.</li> <li><code>block_condition</code> - the power will only listen to game events emitted by blocks.</li> </ul>","boost":2},{"location":"types/power_types/game_event_listener/#fields","title":"Fields","text":"Field Type Default Description <code>block_action</code> Block Action Type optional If specified, this action will be executed at the position where the game event was emitted. <code>bientity_action</code> Bi-Entity Condition Type optional If specified, this action will be executed on either or both the 'actor' and the 'target' upon listening to certain game event(s). <code>block_condition</code> Block Condition Type optional If specified, the power will only listen to the game event if the block that emitted it fulfills this condition. <code>bientity_condition</code> Bi-Entity Condition Type optional If specified, the power will only listen to the game event if either or both the 'actor' that emitted it and the 'target' fulfill this condition. <code>cooldown</code> Positive Integer <code>1</code> Interval of ticks the power needes to recharge before the power can be triggered again. <code>hud_render</code> HUD Render optional If specified, determines how the cooldown of the power is visualized in the HUD. <code>range</code> Positive Integer <code>16</code> Determines how far the power can listen for game events. <code>event</code> Identifier optional If specified, the power will only listen to this game event. <code>events</code> Array of Identifiers optional If specified, the power will only listen to these game events. <code>tag</code> Identifier optional If specified, the power will only listen to the game events included in this game event tag.","boost":2},{"location":"types/power_types/game_event_listener/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:game_event_listener\",\n\"block_action\": {\n\"type\": \"apoli:set_block\",\n\"block\": \"minecraft:stone\"\n},\n\"block_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:bell\"\n},\n\"range\": 32\n}\n</code></pre> <p>This example will replace Bells that emits a vibration within a 32 blocks radius with Stone.</p> <pre><code>{\n\"type\": \"eggolib:game_event_listener\",\n\"bientity_action\": {\n\"type\": \"apoli:invert\",\n\"action\": {\n\"type\": \"eggolib:damage\",\n\"source\": {\n\"name\": \"player\"\n},\n\"modifier\": {\n\"operation\": \"multiply_total_multiplicative\",\n\"value\": 0.25\n}\n}\n},\n\"bientity_condition\": {\n\"type\": \"apoli:actor_condition\",\n\"condition\": {\n\"type\": \"apoli:entity_type\",\n\"entity_type\": \"minecraft:creeper\"\n}\n},\n\"event\": \"minecraft:step\"\n}\n</code></pre> <p>This example will damage Creepers emitting a <code>minecraft:step</code> vibration (via walking) within a 16 blocks radius.</p>","boost":2},{"location":"types/power_types/inventory/","title":"Inventory","text":"<p>Power Type</p> <p>Provides an inventory that can be opened with the specified key, which may or may not persist on death.</p> <p>Type ID: <code>eggolib:inventory</code></p>","boost":2},{"location":"types/power_types/inventory/#fields","title":"Fields","text":"Field Type Default Description <code>title</code> String <code>\"container.inventory\"</code> The translation key or literal text to use as the display name for the inventory. <code>container_type</code> Container Type <code>\"dropper\"</code> Determines what type of container preset the inventory will use. <code>drop_on_death</code> Boolean <code>false</code> If set to true, the player will drop the items from the inventory on death. Items with the Curse of Vanishing enchantment will also vanish. <code>drop_on_death_filter</code> Item Condition Type optional If specified, only the item stack(s) that fulfill this condition will be dropped on death. <code>recoverable</code> Boolean <code>true</code> Determines if the contents of the inventory should be dropped upon losing the power. <code>key</code> Key optional The keybind this power is bound to.","boost":2},{"location":"types/power_types/inventory/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:inventory\",\n\"container_type\": \"chest\",\n\"key\": {\n\"key\": \"key.hotbar.9\"\n}\n}\n</code></pre> <p>This example will provide an inventory with a size similar to a single Chest that can be opened with the <code>key.hotbar.9</code> keybind.</p> <pre><code>{\n\"type\": \"eggolib:inventory\",\n\"title\": \"Pockets\",\n\"container_type\": \"hopper\",\n\"key\": {\n\"key\": \"key.use\"\n},\n\"condition\": {\n\"type\": \"apoli:and\",\n\"conditions\": [\n{\n\"type\": \"apoli:equipped_item\",\n\"equipment_slot\": \"mainhand\",\n\"item_condition\": {\n\"type\": \"apoli:empty\"\n}\n},\n{\n\"type\": \"apoli:equipped_item\",\n\"equipment_slot\": \"offhand\",\n\"item_condition\": {\n\"type\": \"apoli:empty\"\n}\n}\n]\n}\n}\n</code></pre> <p>This example will provide an inventory with a size similar to a Hopper that can be opened using the <code>key.use</code> keybind while holding no items in the mainhand and the offhand.</p>","boost":2},{"location":"types/power_types/invisibility/","title":"Invisibility","text":"<p>Power Type</p> <p>Grants the entity that has the power invisibility, which may or may not affect their armor.</p> <p>Type ID: <code>eggolib:invisibility</code></p> <p>Note</p> <p>In the context of this power type, the 'target' entity is the entity that has the power whilst the 'actor' entities are the players that can see the 'target' entity.</p>","boost":2},{"location":"types/power_types/invisibility/#fields","title":"Fields","text":"Field Type Default Description <code>bientity_condition</code> Bi-entity Condition Type optional If specified, the 'target' entity will only be invisible to the 'actor' entities if this condition is fulfilled by either or both 'actor' and 'target' entities. <code>render_armor</code> Boolean Determines if the armor should also be invisible.","boost":2},{"location":"types/power_types/invisibility/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:invisibility\",\n\"render_armor\": false\n}\n</code></pre> <p>This example will make the entity that has the power invisible to all entities.</p> <pre><code>{\n\"type\": \"eggolib:invisibility\",\n\"bientity_condition\": {\n\"type\": \"apoli:actor_condition\",\n\"condition\": {\n\"type\": \"apoli:power\",\n\"power\": \"*:*\"\n},\n\"inverted\": true\n},\n\"render_armor\": false\n}\n</code></pre> <p>This example will make the entity that has the power invisible to entities. The entity will also be invisible to players that do not have the power.</p>","boost":2},{"location":"types/power_types/model_flip/","title":"Model Flip","text":"<p>Power Type</p> <p>Flips the model of the entity, similar to how Dinnerbone's model is flipped.</p> <p>Type ID: <code>eggolib:model_flip</code></p>","boost":2},{"location":"types/power_types/model_flip/#fields","title":"Fields","text":"<p>None.</p>","boost":2},{"location":"types/power_types/model_flip/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:model_flip\"\n}\n</code></pre> <p>This example will flip the model of the entity that has the power.</p> <pre><code>{\n\"type\": \"eggolib:model_flip\",\n\"condition\": {\n\"type\": \"apoli:sneaking\"\n}\n}\n</code></pre> <p>This example will flip the model of the entity that has the power if the entity is sneaking.</p>","boost":2},{"location":"types/power_types/modify_breathing/","title":"Modify Breathing","text":"<p>Power Type</p> <p>Modifies how the entity that has the power breathes.</p> <p>Type ID: <code>eggolib:modify_breathing</code></p> <p>Note</p> <p>The base values for gaining and losing air is 4 and 1 respectively.</p>","boost":2},{"location":"types/power_types/modify_breathing/#fields","title":"Fields","text":"Field Type Default Description <code>breathable_block_condition</code> Block Condition Type Determines which block the entity will be able to breathe in. <code>breathing_status_effect</code> Identifier optional If specified, the entity will be able to maintain their breath if they have this status effect. <code>breathing_status_effects</code> Array of Identifiers optional If specified, the entity will be able to maintain their breath if they have one of these status effects. <code>gain_air_modifier</code> Attribute Modifier optional If specified, this modifier will be applied to the air gained by breathing in a breathable block. <code>gain_air_modifiers</code> Array of Attribute Modifiers optional If specified, these modifiers will be applied to the air gained by breathing in a breathable block. <code>gain_air_interval</code> Positive Integer <code>1</code> Determines how frequent should the entity gain air. <code>lose_air_modifier</code> Attribute Modifier optional If specified, this modifier will be applied to the air lost by not breathing in a breathable block. <code>lose_air_modifiers</code> Array of Attribute Modifiers optional If specified, these modifiers will be applied to the air lost by not breathing in a breathable block. <code>lose_air_interval</code> Positive Integer <code>1</code> Determines how frequent should the entity lose air. <code>damage_source</code> Damage Source optional If specified, this damage source will be used instead when dealing damage to the entity upon not being able to breathe. <code>damage_modifier</code> Attribute Modifier optional If specified, this modifier will be applied to the damage dealt to the entity upon not being able to breathe. <code>damage_modifiers</code> Array of Attribute Modifiers optional If specified, these modifiers will be applied to the damage dealt to the entity upon not being able to breathe. <code>damage_interval</code> Positive Integer <code>20</code> Determines how frequent the damage should be dealt to the entity upon not being able to breathe. <code>particle</code> Particle Effect optional If specified, this particle will be emitted instead upon being damaged for not being able to breathe. <code>ignore_respiration</code> Boolean <code>false</code> Determines whether the power should ignore the effects of the Respiration enchantment. <code>priority</code> Integer <code>0</code> Determines the priority of the power. The power with the highest priority value will be used.","boost":2},{"location":"types/power_types/modify_breathing/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:modify_breathing\",\n\"breathable_block_condition\": {\n\"type\": \"apoli:fluid\",\n\"fluid_condition\": {\n\"type\": \"apoli:in_tag\",\n\"tag\": \"minecraft:lava\"\n}\n}\n}\n</code></pre> <p>This example will make the entity only be able to breathe in Lava.</p> <pre><code>{\n\"type\": \"eggolib:modify_breathing\",\n\"breathable_block_condition\": {\n\"type\": \"apoli:fluid\",\n\"fluid_condition\": {\n\"type\": \"apoli:in_tag\",\n\"tag\": \"minecraft:water\"\n}\n},\n\"breathing_status_effect\": \"minecraft:water_breathing\",\n\"lose_air_modifier\": {\n\"operation\": \"addition\",\n\"value\": 3\n}\n}\n</code></pre> <p>This example will make the entity only be able to breathe in Water unless they have the Water Breathing status effect, which they can use to breathe on land.</p>","boost":2},{"location":"types/power_types/modify_hurt_ticks/","title":"Modify Hurt Ticks","text":"<p>Power Type</p> <p>Modifies how long the entity that has the power is immune to damage upon being damaged.</p> <p>Type ID: <code>eggolib:modify_hurt_ticks</code></p> <p>Note</p> <p>By default, an entity has a \"hurt ticks\" value of 20. The entity will only receive damage again only if either their \"hurt ticks\" value is less than 10 or if they receive a damage with a higher value than the previous.</p>","boost":2},{"location":"types/power_types/modify_hurt_ticks/#fields","title":"Fields","text":"Field Type Default Description <code>bientity_action</code> Bi-entity Action Type optional If specified, this action will be executed on either or both the actor or target entities. <code>bientity_condition</code> Bi-entity Condition Type optional If specified, the specified action/modifier(s) will only be executed/applied if this condition is fulfilled by either or both actor or target entities. <code>damage_condition</code> Damage Condition Type optional If specified, the specified action/modifier(s) will only be executed/applied if this condition is fulfilled by the damage dealt to the target entity. <code>modifier</code> Attribute Modifier optional If specified, this modifier will be applied to the hurt ticks of the target entity. <code>modifiers</code> Array of Attribute Modifiers optional If specified, these modifiers will be applied to the hurt ticks of the target entity.","boost":2},{"location":"types/power_types/modify_hurt_ticks/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:modify_hurt_ticks\",\n\"modifier\": {\n\"operation\": \"multiply_total\",\n\"value\": 1\n}\n}\n</code></pre> <p>This example will double the hurt ticks of the entity that has the power.</p> <pre><code>{\n\"type\": \"eggolib:modify_hurt_ticks\",\n\"damage_condition\": {\n\"type\": \"apoli:attacker\"\n},\n\"modifier\": {\n\"operation\": \"multiply_total\",\n\"value\": -0.5\n}\n}\n</code></pre> <p>This example will half the hurt ticks of the entity that has the power only if the entity has been attacked by another entity.</p>","boost":2},{"location":"types/power_types/modify_label_render/","title":"Modify Label Render","text":"<p>Power Type</p> <p>Modifies the name label of the entity that has the power.</p> <p>Type ID: <code>eggolib:modify_label_render</code></p>","boost":2},{"location":"types/power_types/modify_label_render/#fields","title":"Fields","text":"Field Type Default Description <code>render_mode</code> Render Mode <code>\"default\"</code> Determines how the name label of the entity is rendered. <code>text</code> Text Component optional If specified, this text will be used to replace the content of the name label of the entity. <code>priority</code> Integer <code>0</code> Determines the priority of the power. The power with the highest value will be used.","boost":2},{"location":"types/power_types/modify_label_render/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:modify_label_render\",\n\"render_mode\": \"hide_partially\"\n}\n</code></pre> <p>This example will render the name label of the entity semi-transparently as if the entity is sneaking.</p> <pre><code>{\n\"type\": \"eggolib:modify_label_render\",\n\"text\": {\n\"text\": \"[REDACTED]\",\n\"bold\": true,\n\"color\": \"black\"\n}\n}\n</code></pre> <p>This example will replace the content of the name label of the entity to <code>[REDACTED]</code> with the color black.</p>","boost":2},{"location":"types/power_types/prevent_block_place/","title":"Prevent Block Place","text":"<p>Power Type</p> <p>Prevents the player that has the power from placing a block.</p> <p>Type ID: <code>eggolib:prevent_block_place</code></p>","boost":2},{"location":"types/power_types/prevent_block_place/#fields","title":"Fields","text":"Field Type Default Description <code>entity_action</code> Entity Action Type optional If specified, this action will be executed on the player upon attempting to place a block. <code>held_item_action</code> Item Action Type optional If specified, this action will be executed on the item the player has used to place a block. <code>result_item_action</code> Item Action Type optional If specified, this action will be executed on the item that will be given to the player upon placing a block. <code>place_to_action</code> Block Action Type optional If specified, this action will be executed at the position of the block the player has attempted to place. <code>place_on_action</code> Block Action Type optional If specified, this action will be executed on the block the player attempted to place a block on. <code>item_condition</code> Item Condition Type optional If specified, only execute the specified actions if the item the player has used to place a block fulfills this condition. <code>place_to_condition</code> Block Condition Type optional If specified, only execute the specified actions if the old block at the position of the new block the player has attempted to place fulfills this condition. <code>place_on_condition</code> Block Condition Type optional If specified, only execute the specified actions if the block the player has attempted to place a block on fulfills this condition. <code>directions</code> Array of Strings <code>[\"up\", \"down\", \"north\", \"south\", \"east\", \"west\"]</code> Determines if the specified actions should be executed if the player has attempted to place a block at the specified side(s) of a block. <code>hands</code> Array of Strings <code>[\"main_hand\", \"off_hand\"]</code> Determines if the specified actions should be executed if the player has attempted to place a block using the specified hand(s). <code>result_stack</code> Item Stack optional If specified, this item will be given to the player upon attempting to place a block.","boost":2},{"location":"types/power_types/prevent_block_place/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:prevent_block_place\",\n\"place_to_condition\": {\n\"type\": \"apoli:fluid\",\n\"fluid_condition\": {\n\"type\": \"apoli:in_tag\",\n\"tag\": \"minecraft:water\"\n}\n}\n}\n</code></pre> <p>This example will prevent the player that has the power from placing a block if there's a Water fluid at where the block is supposed to be placed to.</p> <p><pre><code>{\n\"type\": \"eggolib:prevent_block_place\",\n\"entity_action\": {\n\"type\": \"apoli:execute_command\",\n\"command\": \"title @s actionbar {\\\"text\\\": \\\"Can't place a block there!\\\", \\\"color\\\": \\\"red\\\"}\"\n},\n\"place_on_condition\": {\n\"type\": \"apoli:block\",\n\"block\": \"minecraft:farmland\"\n},\n\"directions\": [\n\"up\"\n]\n}\n</code></pre> This example will prevent the player that has the power from placing a block on top of a Farmland block.</p>","boost":2},{"location":"types/power_types/prevent_item_pickup/","title":"Prevent Item Pickup","text":"<p>Power Type</p> <p>Prevents the entity that has the power from picking up an item.</p> <p>Type ID: <code>eggolib:prevent_item_pickup</code></p> <p>Note</p> <p>In the context of this power type, the 'actor' entity is the entity that may have thrown the item while the 'target' entity is the entity that has attempted to pick up an item.</p>","boost":2},{"location":"types/power_types/prevent_item_pickup/#fields","title":"Fields","text":"Field Type Default Description <code>bientity_action</code> Bi-entity Action Type optional If specified, this action will be executed on either or both the 'actor' and 'target' entities upon the 'target' entity being prevented from picking up an item. <code>item_action</code> Item Action Type optional If specified, this action will be executed on the item that was attempted to be picked up. <code>bientity_condition</code> Bi-entity Condition Type optional If specified, only prevent the item from being picked up and execute the actions if this condition is fulfilled by either or both the 'actor' and 'target' entities. <code>item_condition</code> Item Condition Type optional If specified, only items that fulfills this condition will be prevented from being picked up.","boost":2},{"location":"types/power_types/prevent_item_pickup/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:prevent_item_pickup\",\n\"item_condition\": {\n\"type\": \"eggolib:block_item\"\n}\n}\n</code></pre> <p>This example will prevent the entity that has the power from picking up any block items.</p> <pre><code>{\n\"type\": \"eggolib:prevent_item_pickup\",\n\"bientity_condition\": {\n\"type\": \"eggolib:has_matching_tag\",\n\"inverted\": true\n},\n\"item_condition\": {\n\"type\": \"apoli:ingredient\",\n\"ingredient\": {\n\"item\": \"minecraft:diamond\"\n}\n}\n}\n</code></pre> <p>This example will prevent the entity that has the power from picking up a Diamond item if that said item is thrown by an entity that doesn't have a matching tag with the entity that has the power.</p>","boost":2},{"location":"types/power_types/prevent_item_use/","title":"Prevent Item Use","text":"<p>Power Type</p> <p>Prevents the player from \"using\" (e.g: right-click action, such as eating, blocking, etc.) items.</p> <p>Type ID: <code>eggolib:prevent_item_use</code></p>","boost":2},{"location":"types/power_types/prevent_item_use/#fields","title":"Fields","text":"Field Type Default Description <code>entity_action</code> Entity Action Type optional If specified, this action will be executed on the player that has the power upon being prevented from using an item. <code>held_item_action</code> Item Action Type optional If specified, this action will be executed on the item that was prevented from being used. <code>result_item_action</code> Item Action Type optional If specified, this action will be executed on the item that is given upon being prevented from using an item. <code>item_condition</code> Item Condition Type optional If specified, only items that fulfills this condition will be prevented from being used. <code>result_stack</code> Item Stack optional If specified, this item will be given to the player upon being prevented from using an item. <code>hands</code> Array of Strings <code>[\"main_hand\", \"off_hand\"]</code> Determines if the power should prevent the usage of items from the specified hand(s). Accepts <code>\"main_hand\"</code>, <code>\"off_hand\"</code> or both. <code>priority</code> Integer <code>0</code> Determines the execution priority of the power.","boost":2},{"location":"types/power_types/prevent_item_use/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:prevent_item_use\",\n\"hands\": [\n\"off_hand\"\n]\n}\n</code></pre> <p>This example will prevent the player from using items in the offhand slot.</p> <pre><code>{\n\"type\": \"eggolib:prevent_item_use\",\n\"item_condition\": {\n\"type\": \"apoli:ingredient\",\n\"ingredient\": {\n\"item\": \"minecraft:shield\"\n}\n},\n\"hands\": [\n\"main_hand\"\n]\n}\n</code></pre> <p>This example will prevent the player from using Shields in the mainhand slot.</p>","boost":2},{"location":"types/power_types/starting_equipment/","title":"Starting Equipment","text":"<p>Power Type</p> <p>Provides the entity with the specified items when the power is granted.</p> <p>Type ID: <code>eggolib:starting_equipment</code></p>","boost":2},{"location":"types/power_types/starting_equipment/#fields","title":"Fields","text":"Field Type Default Description <code>stack</code> Generalized Positioned Item Stack optional If specified, this item stack will be given to the entity. <code>stacks</code> Array of Generalized Positioned Item Stack optional If specified, these item stacks will be given to the entity.","boost":2},{"location":"types/power_types/starting_equipment/#examples","title":"Examples","text":"Example #1Example #2 <pre><code>{\n\"type\": \"eggolib:starting_equipment\",\n\"stack\": {\n\"item\": \"minecraft:glass\",\n\"slot\": \"armor.head\"\n}\n}\n</code></pre> <p>This example will provide a Glass block on the entity's head.</p> <pre><code>{\n\"type\": \"eggolib:starting_equipment\",\n\"stacks\": [\n{\n\"item\": \"minecraft:shield\",\n\"slot\": \"weapon.offhand\"\n},\n{\n\"item\": \"minecraft:iron_sword\",\n\"slot\": \"weapon.mainhand\"\n}\n]\n}\n</code></pre> <p>This example will provide a Shield and an Iron Sword to the entity in its offhand and mainhand equipment slots respectively.</p>","boost":2}]}